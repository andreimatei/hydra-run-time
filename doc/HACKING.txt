====================
 SLC Hacking  guide
====================

:Abstract: This document presents tips & tricks for developers working
   on the SLC source code.

.. contents::

Maintainer mode
===============

When checking out the repository from Subversion, the source tree does
not "look and feel" like the one that is distributed to users. 

Getting started
---------------

1. Read ``doc/README.txt`` and ``doc/HACKING.txt`` thoroughly.

2. Ensure you did #1, really. 

3. Check all the requirements are available, install/upgrade as needed.

4. Run::

     ./boostrap
     mkdir build
     cd build
     ../configure --enable-maintainer-mode --enable-testsuite
     make
     make check

5. Enjoy!

Special requirements
--------------------

When working from SVN, the following *additional* requirements apply:

- Autoconf 2.63 or later

- Automake 1.11 or later

- Docutils 0.5 or later

- GNU Texinfo 4.13 or later

Extra Makefile rules
--------------------

A number of Makefile rules are enabled only in "maintainer mode",
which is the state of the software between a checkout from SVN and a
distribution package. The idea is that the outcome of these rules is
packaged along during a distribution, so they do not need to be
enabled in the final package.

To enable these rules, use::

   configure --enable-maintainer-mode

Working from the source directory
=================================

The ``slc`` and ``slr`` scripts are generated during
``make``. However, they contain absolute paths relative to their
installation directory. This means they cannot be used "as-is" before
``make install`` is run.

This may be a hassle during development (would require to re-run
``make install`` after each change). To balance this, it is possible
to set environment variables to indicate that the scripts should find
the data in the source directory. Use ``make show-vars`` to set
environment variables::

   $ eval `make show-vars`

Note: this will update ``PATH`` as well. Once the variables are set,
the command-line utilities can be used directly even before ``make
install`` has been run, e.g.::

   $ cd programs/demo && slc 10threads.sl && slr a.out


Committing work
===============

When committing to the ``trunk`` branch of the repository:

1. ensure that ``make distcheck`` succeeds.

2. update the ``ChangeLog`` with a detailed description of your
   changes. (use ``C-x 4 a`` in Emacs from an edited file to get the
   entry automatically generated)

3. save the output of ``svn diff`` to a file.

4. perform the commit, ensuring that the latest ``ChangeLog`` entry is
   pasted into the commit message.

5. send the contents of the file from step #4 to the mailing list,
   ensuring that the changes to the ``ChangeLog`` appear first in the
   e-mail.


Distributing
============

To package a copy of SLC for use by users who do not have access to
the SVN repository, perform the following steps:

1. ensure that the documentation is consistent with the state of the
   software;

2. ensure that ``doc/NEWS.txt`` contains the latest major changes;

3. ensure that ``make distcheck`` succeeds.

4. commit any outstanding changes. 

5. run ``make dist``.

After step #5 has completed, ``make dist`` will have output two
archives (``.tar.gz`` and ``.tar.bz2``) suitable for distribution.

.. note:: You should run ``make dist`` after committing to Subversion,
   to ensure that the SVN revision number at the end of the
   ``ChangeLog`` is up-to-date. This is used in the message output by
   the ``--version`` flag on the utilities.

Goodies
=======

The following "features" of the source tree are there for the benefit
of the developer, not the end user of the SL toolchain:


- ``make check-slt`` at the top directory invokes ``slt`` on the
  console, and lets it use ASCII art for test results. 

  This is nicer to the eye than ``make check``, but ``make check -jN``
  can deliver test results much faster on many-core machines. In both
  cases, failed tests cause log files to stay around for further
  investigation. Fish for the log files in the test subdirectories
  (extension ``.log``), or look at what ``slt`` says about remaining
  files;

- the list of SL implementations that are tested by ``make check`` and
  ``make check-slt`` is normally derived from ``configure`` flags
  (e.g. ``--enable-check-utc``), but can be overriden with the
  environment variable ``SLT_IMPL_LIST``;

- the environment variable ``TRACE``, when set and not empty, cause
  the scripts ``slt``, ``slc``, ``slr`` and ``timeout`` to enable the
  shell tracing mode (``set -x``). 

  .. note:: This feature is redundant with the better-looking output
     of ``slc -v``, ``slr -t`` and ``slt`` 's detailed logs. Check the
     documentation of these utilities for details. However, ``TRACE``
     was introduced when debugging process management and signal
     handling in ``slt`` and may still be useful to debug the script
     internals.

.. Local Variables:
.. mode: rst
.. End:
