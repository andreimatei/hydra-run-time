sl_begin_header([[SLC_SVP_DIV_SLH]])m4_dnl -*- m4 -*-
//
// div.slh: this file is part of the slc project.
//
// Copyright (C) 2009 Universiteit van Amsterdam.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
//
// The complete GNU General Public Licence Notice can be found as the
// `COPYING' file in the root directory.
//
// $Id$
//

m4_ifdef([[USE_C_DIVIDE]],[[

m4_define([[divu]],[[
  (__typeof__(([[$1]]) / ([[$2]])))
  ((unsigned long long)([[$1]]) / (unsigned long long)([[$2]]))
]])

m4_define([[modu]],[[
  (__typeof__(([[$1]]) % ([[$2]])))
  ((unsigned long long)([[$1]]) % (unsigned long long)([[$2]]))
]])

m4_define([[divs]],[[
  (__typeof__(([[$1]]) / ([[$2]])))
  ((signed long long)([[$1]]) / (signed long long)([[$2]]))
]])

m4_define([[mods]],[[
  (__typeof__(([[$1]]) % ([[$2]])))
  ((signed long long)([[$1]]) % (signed long long)([[$2]]))
]])

m4_define([[divmodu]],[[do {
    unsigned long long __divmod_dividend = ([[$1]]), __divmod_divisor = ([[$2]]);
    unsigned long long __divmod_mod = __divmod_dividend % __divmod_divisor;
    unsigned long long __divmod_res = __divmod_dividend / __divmod_divisor;
    ([[$1]]) = (__typeof__ ([[$1]]))__divmod_mod;
    ([[$2]]) = (__typeof__ ([[$2]]))__divmod_res;
  } while(0)]])

m4_define([[divmods]],[[do {
    signed long long __divmod_dividend = ([[$1]]), __divmod_divisor = ([[$2]]);
    signed long long __divmod_mod = __divmod_dividend % __divmod_divisor;
    signed long long __divmod_res = __divmod_dividend / __divmod_divisor;
    ([[$1]]) = (__typeof__ ([[$1]]))__divmod_mod;
    ([[$2]]) = (__typeof__ ([[$2]]))__divmod_res;
  } while(0)]])

]], [[ /* !HAVE_C_DIVIDE */

sl_decl(__divmodqu, void, sl_shparm(unsigned long long, x), sl_shparm(unsigned long long, y));
sl_decl(__divmodqs, void, sl_shparm(signed long long, x), sl_shparm(signed long long, y));

m4_define([[divmodu]], [[do {
unsigned long long __dmu_x = ([[$1]]);
unsigned long long __dmu_y = ([[$2]]);
sl_create(,,,,,,,__divmodqu,
          sl_sharg(unsigned long long, __dmu_sx, __dmu_x),
          sl_sharg(unsigned long long, __dmu_sy, __dmu_y));
sl_sync();
([[$1]]) = sl_geta(__dmu_sx);
([[$2]]) = sl_geta(__dmu_sy);
} while(0)]])

m4_define([[divmods]], [[do {
unsigned long long __dms_x = ([[$1]]);
unsigned long long __dms_y = ([[$2]]);
sl_create(,,,,,,,__divmodqs,
          sl_sharg(signed long long, __dms_sx, __dms_x),
          sl_sharg(signed long long, __dms_sy, __dms_y));
sl_sync();
([[$1]]) = sl_geta(__dms_sx);
([[$2]]) = sl_geta(__dms_sy);
} while(0)]])

m4_define([[divu]], [[({
    unsigned long long __divu_x = ([[$1]]), __divu_y = ([[$2]]);
    divmodu(__divu_x, __divu_y);
    (__typeof__(([[$1]]) / ([[$2]])))__divu_y;
  })]])

m4_define([[divs]], [[({
    long long __divs_x = ([[$1]]), __divs_y = ([[$2]]);
    divmods(__divs_x, __divs_y);
    (__typeof__(([[$1]]) / ([[$2]])))__divs_y;
  })]])

m4_define([[modu]], [[({
    unsigned long long __modu_x = ([[$1]]), __modu_y = ([[$2]]);
    divmodu(__modu_x, __modu_y);
    (__typeof__(([[$1]]) % ([[$2]])))__modu_x;
  })]])

m4_define([[mods]], [[({
    long long __mods_x = ([[$1]]), __mods_y = ([[$2]]);
    divmods(__mods_x, __mods_y);
    (__typeof__(([[$1]]) % ([[$2]])))__mods_x;
  })]])

]])

sl_end_header([[SLC_SVP_DIV_SLH]])
