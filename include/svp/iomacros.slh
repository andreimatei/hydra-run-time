#ifndef SVP_SUGAR_SLH
#define SVP_SUGAR_SLH

sl_include(svp/io.slh)

#define putc(C) ({ sl_proccall(svp_io_putc, sl_glarg(char, c, (C))); })

#define puts(S) ({ sl_proccall(svp_io_puts, sl_glarg(const char*, s, (S))); })

#define putf(F, Prec) ({						\
      sl_proccall(svp_io_putf, sl_glarg(double, d, (F)), sl_glarg(unsigned, gprec, (Prec)), sl_glarg(unsigned, gbase, 10)); \
    })

#define putn(N) ({ \
      sl_proccall(svp_io_putn, sl_glarg(long long, n, (N)), sl_glarg(unsigned, gbase, 10)); \
    })

#define putu(N) ({ \
      sl_proccall(svp_io_putun, sl_glarg(unsigned long long, n, (N)), sl_glarg(unsigned, gbase, 10)); \
    })

#define printf1(Fmt, X) ({						\
      struct {								\
	union { __typeof__(X) __arg; svp_arg_slot __slot; } __a0;	\
      } __pf_args = {							\
	{ (X) }								\
      };								\
      sl_proccall(svp_io_printf, sl_glarg(const char*, gfmt, (Fmt)), sl_glarg(svp_arg_slot*, gdata, (svp_arg_slot*)(void*)&__pf_args)); \
    })

#define printf2(Fmt, X, Y) ({						\
      struct {								\
	union { __typeof__(X) __arg; svp_arg_slot __slot; } __a0;	\
	union { __typeof__(Y) __arg; svp_arg_slot __slot; } __a1;	\
      } __pf_args = {							\
	{ (X) },							\
	{ (Y) }								\
      };								\
      sl_proccall(svp_io_printf, sl_glarg(const char*, gfmt, (Fmt)), sl_glarg(svp_arg_slot*, gdata, (svp_arg_slot*)(void*)&__pf_args)); \
    })

#define printf3(Fmt, X, Y, Z) ({						\
      struct {								\
	union { __typeof__(X) __arg; svp_arg_slot __slot; } __a0;	\
	union { __typeof__(Y) __arg; svp_arg_slot __slot; } __a1;	\
	union { __typeof__(Z) __arg; svp_arg_slot __slot; } __a2;	\
      } __pf_args = {							\
	{ (X) },							\
	{ (Y) },							\
	{ (Z) }								\
      };								\
      sl_proccall(svp_io_printf, sl_glarg(const char*, gfmt, (Fmt)), sl_glarg(svp_arg_slot*, gdata, (svp_arg_slot*)(void*)&__pf_args)); \
    })

#define printf4(Fmt, W, X, Y, Z) ({					\
      struct {								\
	union { __typeof__(W) __arg; svp_arg_slot __slot; } __a0;	\
	union { __typeof__(X) __arg; svp_arg_slot __slot; } __a1;	\
	union { __typeof__(Y) __arg; svp_arg_slot __slot; } __a2;	\
	union { __typeof__(Z) __arg; svp_arg_slot __slot; } __a3;	\
      } __pf_args = {							\
	{ (W) },							\
	{ (X) },							\
	{ (Y) },							\
	{ (Z) }								\
      };								\
      sl_proccall(svp_io_printf, sl_glarg(const char*, gfmt, (Fmt)), sl_glarg(svp_arg_slot*, gdata, (svp_arg_slot*)(void*)&__pf_args)); \
    })

#endif
