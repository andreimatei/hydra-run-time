m4_ifndef([[SV_IOMACROS_SLH]], [[m4_define([[SVP_IOMACROS_SLH]],1)

m4_include(svp/io.slh)

m4_define([[putc]],[[({ sl_proccall(svp_io_putc, sl_glarg(char, c, ([[$1]]))); })]])
m4_define([[puts]],[[({ sl_proccall(svp_io_puts, sl_glarg(const char*, s, ([[$1]]))); })]])

m4_define([[putf]],[[({
sl_proccall(svp_io_putf, 
            sl_glarg(double, d, ([[$1]])),
            sl_glarg(unsigned, gprec, ([[$2]])), 
	    sl_glarg(unsigned, gbase, 10));
})]])

m4_define([[putn]], [[({
sl_proccall(svp_io_putn, 
	    sl_glarg(long long, n, ([[$1]])),
            sl_glarg(unsigned, gbase, 10));
})]])

m4_define([[putu]], [[({
sl_proccall(svp_io_putun, 
            sl_glarg(unsigned long long, n, ([[$1]])), 
            sl_glarg(unsigned, gbase, 10));
})]])

m4_define([[printf]], [[({
struct {
m4_pushdef([[printf_argcount]],0)
m4_foreach([[printf_arg]],m4_dquote(m4_shift($@)),[[
 union { __typeof__(printf_arg) __arg; svp_arg_slot __slot; } __a[[]]printf_argcount;
 m4_step([[printf_argcount]])
]])
} __pf_args = {
m4_foreach([[printf_arg]],m4_dquote(m4_shift($@)),[[
 { (printf_arg) },
]])
};
sl_proccall(svp_io_printf,
            sl_glarg(const char*, gfmt, ([[$1]])),
            sl_glarg(svp_arg_slot*, gdata, (svp_arg_slot*)(void*)&__pf_args));
m4_popdef([[printf_argcount]])
})]])


]])

