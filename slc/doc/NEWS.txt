====================================
 Release notes for the SL toolchain
====================================

This document describes major updates to the SL toolchain.

Version 2.3, January 2010
=========================

New features since 2.2
----------------------

- Additional support for the C99 library has been added (see CSA note
  [sl5]), notably string handling and standard output (incl. ``printf``).

- Using option ``slr -n`` now causes the program's top level thread
  (``t_main``) to be automatically delegated to a SVP place of the
  specified number of cores, instead of the previous behavior of
  ``-n`` which caused the hardware parameters to change.

- A symbol table is provided to the Microgrid simulator to ease
  debugging (requires simulator version 1.0.131-r3441 or later).

Bug fixes since 2.2
-------------------

- A long-standing bug with line numbering has been fixed. This allows
  proper error reporting and debugging information.

- Support GCC 4.4.3 in alternate compiler for MT-Alpha.

- Fix bug with the ``fast_`` allocation macros.

Known limitations
-----------------

- Support for the C99 standard library is incomplete.

- C's ``long double`` type is not supported.

- The C ``tgamma`` function may be incorrectly implemented.

- It is not (yet) possible to create a family of threads from a
  regular C function.

Version 2.2, December 2009
==========================

The SL unit test suite, demo and benchmark programs are now
distributed in separate packages ``sl-tests`` and ``sl-demos``.

New features since 2.1.0a
-------------------------

Language and library
`````````````````````

- The C divide operator is reinstated.

- The C math library is supported (include ``<cmath.h>``).

- New API for pixel-oriented graphics output, declared in
  ``<svp/gfx.h>``.

- New keyword ``sl_anonymous``, which expands to a different C
  identifier each time it appears in source.

- The second argument to ``sl_*arg`` and ``sl_*parm`` (the identifier)
  can be left empty to define an anonymous thread argument/parameter.

- New API for gathering performance metrics (``<svp/perf.h>``)

MT-specific compiler changes
````````````````````````````

- New optimization for MT-Alpha back-end, yielding more efficient core
  pipeline usage in several benchmarks.

- Support GCC 4.4.2 in alternate compiler for MT-Alpha.

Toolchain features
``````````````````

- Microgrid configurations can be specified as "profiles" which
  encapsulate the entire set of architectural settings. Profiles are
  specified with ``slr -m``.

- When running with ``slr -p``, a directory is generated containing
  the files and execution script that are sufficient to reproduce the
  run outside of the SL toolchain. This can serve to reproduce the
  execution or reporting issues.

- New support for actual visual output in MG simulator with ``slr
  -X``.

- The target name ``mtalpha`` is recognized by ``cce`` (and thus ``slc
  -b``) as an alias to ``ppp-mtalpha-sim``.

- From now on, scripts will report meaningful version numbers with
  ``--version``.

- The script version number and a timestamp are reported by ``slt -t``
  and in ``slr`` log files.

Known limitations
-----------------

- C's ``long double`` type is not supported.

- The C ``tgamma`` function may be incorrectly implemented.

- It is not (yet) possible to create a family of threads from a
  regular C function.

Version 2.1.0a, August 2009
===========================

New features since 2.0.3a
-------------------------

Language features
`````````````````

- Now using the C preprocessor before M4: the ``.sl`` and ``.slh``
  extensions disappear in favor of ``.c`` and ``.h``; "``#include``"
  and "``#define``" can now be used freely and both included headers
  and CPP macro definitions can contain SL keywords.

- As a result of using the C preprocessor first, C comments and
  whitespace inside SL macros do not cause strange behavior any more.

- C function definitions and calls are supported by the MT-Alpha
  target. The macro ``sl_funcall`` now simply expands transparently to
  the corresponding C function call.

- New keyword ``sl_end_thread``, as a statement which causes the
  current thread to terminate when it is reached.

Execution and benchmarking
``````````````````````````

- When running with ``slr -t``, detailed information about how the
  program is run is printed on the standard error output. 

- New performance metrics framework in the SL library.

- New data input mechanism, to allow programs to read data formatted
  in Sisal's Fibre I/O format.

- New interface to access the thread local storage on the Microgrid,
  requires simulator revision r2462 or later.

- More benchmarks bundled with toolchain.

Scripts and testing environment
```````````````````````````````

- The ``slr``, ``slt`` and ``timeout`` scripts now react better to
  signals and terminal hangups.

- A new ``make`` target, ``make check-slt`` is provided to run the
  testsuite with ASCII-art output (eye-candy). ``make check`` is
  modified to use the new "parallel tests" feature from Automake 1.11
  which supports concurrency more efficiently than ``slt``.

- A new utility ``slt-many`` is provided to run ``slt`` on a custom
  list of test files / directories provided on the command line and
  provide a test results summary.

Known limitations
-----------------

- C's ``long double`` type is not supported.

- The C ``tgamma`` function may be incorrectly implemented.

- It is not (yet) possible to create a family of threads from a
  regular C function.

Version 2.0.3a, June 2009
=========================

- Development version only.

- Fix code generation bug for MT-Alpha happening when a thread
  function has many local variables.

Known limitations
-----------------

- Comments inside the parameters to ``sl_def`` and other SL macros
  cause undesired effects.

- Only "simple" function return types are supported in function calls
  from thread functions. Also only 6 function arguments are supported,
  of "simple" types as well. See CSA note [sl1] for details.

Version 2.0.2a, June 2009
=========================

New features since 2.0.1a
-------------------------

- New function call syntax from thread functions (``sl_funcall``)
  documented in CSA note [sl1].

- Add memory management services to the library (``malloc``), based on
  Doug Lea's implementation (dlmalloc).

Known issues
------------

- Comments inside the parameters to ``sl_def`` and other SL macros
  cause undesired effects.

- Only "simple" function return types are supported in function calls
  from thread functions. Also only 6 function arguments are supported,
  of "simple" types as well. See CSA note [sl1] for details.

Version 2.0.1a, June 2009
=========================

Changes since 2.0.0a
--------------------

- Change license to GPLv3 since we are reusing code from Autoconf's
  m4sugar.

- Improvements to benchmarking code.

Known issues
------------

- Comments inside the parameters to ``sl_def`` and other SL macros
  cause undesired effects.

Version 2.0.0a, May 2009
========================

Changes since 2.x
-----------------

- Lots of bug fixes; more unit tests. 

- Move language specification to external CSA notes [sl1] and [sl2].

- Support GCC 4.4 in alternate compiler for MT-Alpha.

- Upgrade the muTC-ptl back-end from upstream.

- Rename ``sgr`` to ``slr``.

- New FFT benchmark.

Known issues
------------

- Comments inside the parameters to ``sl_def`` and other SL macros
  cause undesired effects.


Version 2.x, February 2009
==========================

Changes since 1.x
-----------------

- Better documentation, including a formal SL language specification
  derived from C99.

- Alternate SL to MT-Alpha compiler.

- Initial "standard SL library".

- "``utcc``" renamed to "``slc``", to reflect the additional
  generality.

- New program input mechanism via "sgr" helper script.

Known issues
------------

- Comments inside the parameters to ``sl_def`` and other SL macros
  cause undesired effects.

Version 1.x (utcc), December 2008
=================================

- Include a unit test suite and demo applications together with the
  compiler.





.. Local Variables:
.. mode: rst
.. End:
