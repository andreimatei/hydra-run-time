- seq-c is not ready for merging... besides other possible problems, visit_createargmem makes assumptions
about the C type of stubs and descriptors, plus it makes a call to set_stub_pointer
- program crashes when the block size >= the number of threads
- right now, no matter where the setp statements are located in the body, they will be
  moved at the end by the Create_2_HydraCall visitor. This means that the children reading them are not unblocked until the body is
  run to completion. This is a problem, as concurrency is reduced.
- for the mapping function spread, the default place for threads in the new family must be PID (the place
    to which we delegate the new family).
- there is a single type of network message for passing globals, mem or not, so we waste space for a
  descriptor even when we pass a boolean. Actually, ideally we would have 3 types of messages - global,
  mem-global with descriptor, mem-global with first range over. If the network subsystem would support it,
  we'd like to have message of varying length so, if a descriptor has fewer ranges than the maximum, we
  wouldn't waste space

- revisit the uses of .p and .orig_p in descriptors
- inspect uses of gettimeofday()


- rename "prev" to "_prev" and the other params of the various flavors of thread functions created by the compiler (foo_begin, foo_middle...)

- receive memchunks directly where they have to be placed in memory, avoid buffering

- implement another mechanism for making sure that the parent of an independent family is not unblocked before
  all child threads finish: implement an atomic counter in the fam context that all the TC's 
  (or, better yet, all the procs) involved in running the child family have decremented it.


scatter blocks until all confirmations come; if i have multiple scatter's in a create,
        maybe i want to block on the reunion of the 2 sets of confirmations at once...

define an initializer with __attribute__((constructor)) that calls mmap(BIG); free(); 
(or do malloc at the beginning of main()) - to make sure we start
with a non-empty heap, so that a number of mallocs done by libc will work.

take care to close all sockets; in particular the "daemon" one on the primary and secondaries

warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking

in write_istruct and read_istruct, the generic version, handle the case where the reader/writer is inexistent (node_index == -1); this will happen for continuation creates, because the parent is inexistent?

replace NODE_INDEX with a function which returns the current node

support continuation creates - careful, the .parent of a TC can't be a dummy, since reading a global
calls get_parent_ident() to find out who is going to write the global...

add a version of send_sctp_msg that send messages with the SCTP_UNORDERED flag, and use it when approprietely 
(e.g. it is _not_ appropriate when writing shareds and when writing to the "done" flag in a FC, because the write
 to done needs to be done after the write to the shareds)


TODO FOR PERFORMANCE:
- remove -pg flag from build of library and program
- make a single call to grab_available_tc() for getting many tc's at the same time when necessary
- inspect uses of gettimeofday()


TO DISCUSS:

- if scatter/gather is not used, a chunk can be modified by the first part of a family through propagate
before being sent to the second chunk (thread 1 is mapped on node 1, thread 2 on node 2, (a,b,c) = (1,0,1)
so each thread gets 2 cells but only updates one, first thread does propagate before second thread
does activate. Is this ok? Should we block propagates somehow creation until all data has been distributed
(how would we know when all activates are done?)
- think about the need for .have_data in a stub. It's only purpose seems to be to let the programmer do
activate twice from a thread, without actually pulling memory the second time. Is this desirable? Note
that stub_2_canonical_stub always erases .have_data even when the destination is on the same node. In practice
this seems to be benign, since it's usually ok to do it from parent to child (since _usually_ the parent is 
the data provider) and from child to child (shared), since _usually_ a child passes it's own view up a shared
that it received, so it is himself the data_provider. Is this ok?

KNOWN ISSUES

- language support:
  - for the mapping function spread, the default place for threads in the new family must be PID (the place
    to which we delegate the new family). Currently, the default place of the parent is inherited.

- network:
    - in network.c, no_tcp_incoming_sockets needs locking before incrementing and reading it
    - if a header for a memory transfer is not read fully at once from the socket, the code won't work
- tc.c
    - we need to always to map memory chunks in 1MB increments (cause that what the sigsegv handler does)
    - map_fam doesn't take into account the fact that different nodes might have different NO_PROCS

compiler:
  - sl_getma() doesn't work on globals (look in am/visitor.py at do_visit_seta)
          - actually, getma is broken for shareds also; Raphael didn't implement it (as it's not in the am
              visitor). There need to be .cvar for each (mem) argument declaration
