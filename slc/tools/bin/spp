#! /usr/bin/env python
#
# spp: This file is part of the SL toolchain.
#
# Copyright (C) 2009,2010 Universiteit van Amsterdam.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#

import pprint
import sys
from slc.mtalpha import regmagic
from slc.mtalpha import compile
from slc.mtalpha.asmproc import base, opt

def fundef(funcname, counter, *args):

   # DEBUG:
   #print >>sys.stderr, args
   if len(args) == 1 and args[0] == "":
      args = ()

   c = regmagic.mapcall(convargs(args), funcname)

   mapping = []

   print '__sl_prologue(%s, %d, %d, %d, %d, "%s", %s)' % \
       (funcname, \
           c['nrargregs']['gli'], \
           c['nrargregs']['shi'], \
           c['nrargregs']['glf'], \
           c['nrargregs']['shf'], \
           regmagic.vname_to_legacy('idx_init'), \
           counter)
   
   # DEBUG:
   #pprint.pprint(c)

   if c['gl_mem_offset'] is not None:
      glreg = 'g%d' % c['gl_mem_offset']
      legnr = regmagic.vname_to_legacy(glreg)
      mapping.append("%s:%s" % (legnr, glreg))
      print "register const struct {"
      for d in c['memlayout']:
         print d['ctype'], d['name'], ';'
      print '} * __restrict__ const __sl_ma __asm__("%s");' % legnr
   
   names = []
   for species,d1 in c['args'].items():
      for cat,d2 in d1.items():
         for a in d2:
            name = a['name']
            names.append(name)
            ctype = a['ctype']
            if a['mode'] == 'mem':
               assert cat == 'gl'
               print "m4_define([[__sl_getp_%s]],[[(__sl_ma->%s)]])m4_dnl" % (name,name)
               print "m4_define([[__sl_setp_%s]],[[\n#error cannot set global %s\n]])m4_dnl" % (name, name)
            else: # mode: reg
               regnr = a['regnr']
               if cat == "sh":
                  if species == "f":
                     dreg = "df%d" % regnr
                     sreg = "sf%d" % regnr
                     leg1 = regmagic.vname_to_legacy(dreg)
                     leg2 = regmagic.vname_to_legacy(sreg)
                  else:
                     dreg = "d%d" % regnr
                     sreg = "s%d" % regnr
                     leg1 = regmagic.vname_to_legacy(dreg)
                     leg2 = regmagic.vname_to_legacy(sreg)
                  mapping.append("%s:%s" % (leg1, dreg))
                  mapping.append("%s:%s" % (leg2, sreg))
                  
                  print '__sl_declshp(%s, %s, "%s", "%s");' % (ctype, name, leg1, leg2)
                  print 'm4_define([[__sl_getp_%s]],[[__sl_getshp(%s)]])m4_dnl' % (name, name)
                  print 'm4_define([[__sl_setp_%s]],[[__sl_setshp(%s, [[$1]])]])m4_dnl' % (name, name)
               else: # cat: gl
                  if species == "f":
                     reg = "gf%d" % regnr
                     leg = regmagic.vname_to_legacy(reg)
                  else:
                     reg = "g%d" % regnr
                     leg = regmagic.vname_to_legacy(reg)
                  mapping.append("%s:%s" % (leg, reg))

                  print '__sl_declglp_%s(%s, %s, "%s");' % (a['glmode'], ctype, name, leg)
                  print 'm4_define([[__sl_getp_%s]],[[__sl_glparm_%s]])m4_dnl' % (name, name)
                  print "m4_define([[__sl_setp_%s]],[[\n#error cannot set global %s\n]])m4_dnl" % (name, name)
   print "m4_define([[__sl_parmnames]],[[%s]])m4_dnl" % ','.join(names)
   print 'm4_define([[__sl_parmspec]],[["%s"]])m4_dnl' % ','.join(mapping)

def convargs(args):
   ret = []
   class Arg(object):
      pass
   for a in args:
      la = a.split(':')
      atype, ctype, name = la[:3]
      name = name.strip()
      init = ':'.join(la[3:]).strip()
      if init == "":
         init = None
      o = Arg()
      o.type = atype
      o.ctype = ctype
      o.name = name
      o.init = init
      ret.append(o)
   return ret

def create(funcname, tag, br, *args):

   # DEBUG:
   # print >>sys.stderr, args
   if len(args) == 1 and args[0] == "":
      args = ()

   c = regmagic.mapcall(convargs(args), funcname)

   #pprint.pprint(c, sys.stderr)

   print """
   __sl_allocate(__sl_tag, _sl_place);
   __sl_setstart(__sl_tag, _sl_start);
   __sl_setlimit(__sl_tag, _sl_limit);
   __sl_setstep(__sl_tag, _sl_step);
   __sl_setblock(__sl_tag, _sl_block);
   __sl_create(__sl_tag);
   """
   
   names = []
   glibase = 0
   glfbase = 0

   atsync = []

   if c['gl_mem_offset'] is not None:
      print "struct __sl_ma_t_%s {" % tag
      for d in c['memlayout']:
         print d['ctype'], d['name'], ';'
      print '} __sl_ma_data_%s;' % tag
      atsync.append("""__sl_setma(__sl_tag, "%d");""" % c['gl_mem_offset']) 

   atsync.append("""m4_ifblank(__sl_syncdst,[[__sl_sync_nouse(__sl_tag)]],[[__sl_sync(__sl_tag, __sl_syncdst)]]);""")
   for species,d1 in c['args'].items():
      for cat,d2 in d1.items():
         for a in d2:
            name = a['name']
            names.append(name)
            ctype = a['ctype']

            if a['mode'] == 'mem':
               assert cat == 'gl'
               print r"""m4_pushdef([[__sl_seta_%s]],[[__sl_ma_data_%s.%s = ([[$1]])]]) m4_dnl""" % (name, tag, name)
               #print "FIXME: do something here with gl arg in mem"
            else: # mode: reg
               regnr = a['regnr']
               print r"""m4_pushdef([[__sl_seta_%s]],[[__sl_set%s%sa(%s, __sl_tag, [[$1]], "%d", %s)]]) m4_dnl""" % (name, cat, species, name, regnr, ctype)
               if cat == 'sh':
                  atsync.append("""__sl_get%s%sa(%s, __sl_tag, "%d");""" % (cat, species, name, regnr))
            atsync.append("""m4_popdef([[__sl_seta_%s]])""" % name)

            if a['init'] is not None:
               print """sl_seta(%s, %s); m4_dnl""" % (name, a['init'])

   atsync.append("""__sl_release(__sl_tag);""")
   print r"""m4_pushdef([[__sl_atsync]],[[%s]])m4_dnl""" % 'm4_dnl\n'.join(atsync)


if __name__ == "__main__":
   module = sys.argv[1]
   function = sys.argv[2]
   rest = sys.argv[3:]
   assert module in ['utc0','sppalpha', 'spr']
   assert function in ['fundef', 'create', 'compile','filter','filter2']
   if function == 'fundef':
      fundef(*rest)
   elif function == 'create':
      create(*rest)
   elif function == 'compile':
      compile.compile(*rest)
   elif function == 'filter':
      base.filter(*rest)
   elif function == 'filter2':
      opt.filter(*rest)


