#! @python@
# -*- mode: python -*-

import sys
import subprocess
import os
import re
from slc.input.cm4 import CM4

m4 = os.getenv("M4", "@M4@")
m4_args = []
m4_lquote = '`'
m4_rquote = "'"
m4_file = "__file__"
m4_line = "__line__"
m4_trace = None
verbose = False
dump_trans = None
output_file = '-'
input_files = []
synclines = True

def die(msg):
    print >>sys.stderr, "%s: %s" % (sys.argv[0], msg)
    sys.exit(1)

def log(msg):
    if verbose: 
        print >>sys.stderr, "%s: %s" % (sys.argv[0], msg)
        sys.stderr.flush()

def parse_args(args):
    """
    Command-line argument parsing:

    -o FILE             Output to FILE (default: -)
    -P                  Remove synclines.
    -v                  Be verbose
    -fcm4-lquote=S      Set opening M4 quote (default: `)
    -fcm4-rquote=S      Set closing M4 quote (default: ')
    -fcm4-file=S        Set M4 macro name for setting current file name (default __file__)
    -fcm4-line=S        Set M4 macro name for setting current line number (default __line__)
    -fcm4-trace=FILE    Capture M4 trace to FILE (default: don't capture)
    -fcm4-dump=FILE     Capture filtered input to FILE (default: don't capture)
    -Wm4,OPTION         Add OPTION to M4 command-line

    Other command-line arguments are read as input files.
    """
    global m4_args, m4_lquote, m4_rquote, m4_file, m4_line, m4_trace
    global verbose, output_file, input_files, dump_trans, synclines

    ret = []
    l = len(args)
    i = 0
    while i < l:
        arg = args[i]
        if arg == '-v':   verbose = True
        elif arg == '-o': output_file = args[i + 1]; i = i + 2; continue       
        elif arg == '-P': synclines = False
        elif arg.startswith('-fcm4-lquote='):  m4_lquote = arg.split('=',1)[1]
        elif arg.startswith('-fcm4-rquote='):  m4_rquote = arg.split('=',1)[1]
        elif arg.startswith('-fcm4-file='):    m4_file = arg.split('=',1)[1]
        elif arg.startswith('-fcm4-trace='):   m4_trace = arg.split('=',1)[1]
        elif arg.startswith('-fcm4-line='):    m4_line = arg.split('=',1)[1]
        elif arg.startswith('-fcm4-dump='):    dump_trans = arg.split('=',1)[1]
        elif arg.startswith('-Wm4,'):          m4_args += arg.split(',')[1:]
        elif arg == '--': input_files += args[i+1:]; return
        elif arg == '-':  input_files.append(arg)
        elif arg.startswith('-'): 
            die('unrecognized command-line option "%s"' % arg)
        else:              input_files.append(arg)
        i += 1

    if verbose:
        log("m4 = %s" % repr(m4))
        log("output_file = %s" % repr(output_file))
        log("dump_trans = %s" % repr(dump_trans))
        log("m4_args = %s" % repr(m4_args))
        log("input_files = %s" % repr(input_files))
        log("m4_lquote = %s" % repr(m4_lquote))
        log("m4_rquote = %s" % repr(m4_rquote))
        log("m4_file = %s" % repr(m4_file))
        log("m4_line = %s" % repr(m4_line))
    return ret


def maybe_capture(cond, name, ext, data):
    if cond is not None:
        log("writing %s to %s" % (name, cond))
        if cond == '-':
            outfile = sys.stdout
        else:
            outfile = file(cond + '.' + ext, 'w')
        outfile.write(data)
        if cond != '-': outfile.close()

def do_combine(cm4):
    data = cm4.combine(input_files)
    maybe_capture(dump_trans, "combined input", "mi", data)
    data = cm4.remove_comments(data)
    maybe_capture(dump_trans, "removed comments", "mc", data)
    data = cm4.massage(data)
    maybe_capture(dump_trans, "massaged source", "ms", data)
    data = cm4.do_m4(data, m4_args, m4_trace)
    print data

if __name__ == "__main__":
    parse_args(sys.argv[1:])
    cm4 = CM4(m4_lquote = m4_lquote,
              m4_rquote = m4_rquote,
              m4_file = m4_file,
              m4_line = m4_line,
              sl_lbr = '{', sl_rbr = '}',
              m4 = m4,
              verbose = verbose,
              synclines = synclines)
              

    if not input_files:
        die("no input files");
    do_combine(cm4)

