#! @BASH@
# -*- mode: shell-script -*-
# cce: This file is part of the SL toolchain.
#
copyright="Copyright (C) 2009 Universiteit van Amsterdam."
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# The complete GNU General Public Licence Notice can be found as the
# `COPYING' file in the root directory.
#
set -e

python=${PYTHON:-@python@}

slc_libdir=${SLC_LIBDIR:-@slc_libdir@}
slc_datadir=${SLC_DATADIR:-@slc_datadir@}
slc_incdir=${SLC_INCDIR:-@slc_incdir@}
spp_helper=${SPP:-@spp_helper@}
scu_helper=${SCU:-@scu_helper@}

CC_HOST=${CC_HOST_OVERRIDE:-@CC_HOST@}
CXX_HOST=${CXX_HOST_OVERRIDE:-@CXX_HOST@}
AR_HOST=${AR_HOST_OVERRIDE:-@AR_HOST@}
RANLIB_HOST=${RANLIB_HOST_OVERRIDE:-@RANLIB_HOST@}

CC_ALPHA=${CC_ALPHA_OVERRIDE:-@CC_ALPHA@}
UTCC_MTALPHA=${UTCC_ALPHA_OVERRIDE:-@UTCC_MTALPHA@}
CC_MTALPHA=$UTCC_MTALPHA
AR_MTALPHA=${AR_MTALPHA_OVERRIDE:-@AR_MTALPHA@}
RANLIB_MTALPHA=${RANLIB_MTALPHA_OVERRIDE:-@RANLIB_MTALPHA@}

CC_SPARC=${CC_SPARC_OVERRIDE:-@CC_SPARC@}
UTCC_MTSPARC=${UTCC_SPARC_OVERRIDE:-@UTCC_MTSPARC@}
CC_MTSPARC=$UTCC_MTSPARC
AR_MTSPARC=${AR_MTSPARC_OVERRIDE:-@AR_MTSPARC@}
RANLIB_MTSPARC=${RANLIB_MTSPARC_OVERRIDE:-@RANLIB_MTSPARC@}


version=@slc_version@
bugreports=@bugreports@
basename=${0##*/}

do_usage() {
    cat <<EOF
Configuration Chain Expander.

The \`cce' utility manages configurations for \`slc'. It expands
configuration aliases (short names) into complete strings and provides
shell variables to drive compilation in \`slc'.

Usage: $0 [OPTION] DIALECT-ARCH-OS
   or: $0 [OPTION] ALIAS

Options:
  -s, --set-vars     print shell variables for \`slc'
  -t, --time-stamp   print date of last modification, then exit
  -h, --help         print this help, then exit
  -v, --version      print version number, then exit

Environment variables:
  CC_HOST_OVERRIDE CXX_HOST_OVERRIDE
  CC_ALPHA_OVERRIDE UTCC_MTALPHA_OVERRIDE
  CC_SPARC_OVERRIDE UTCC_MTSPARC_OVERRIDE

Example one-word implementation aliases:

  seqc          sequential C scheduling

  ptl           muTC-ptl (pthreads / C++)

  mtalpha       "alternate" compiler for MT-Alpha

  utc0          Core µTC compiler

  utcx          "desired muTC" (transform/preprocess only)

Example "long" aliases:

  ppp2-mtalpha-sim utc0-mtalpha-sim ptl-host-host-ptl

Report bugs and patches to $bugreports.
EOF
    exit 0
}

do_version() {
    cat <<EOF
$basename $version

$copyright
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Raphael 'kena' Poss.
EOF
    exit 0
}

do_timestamp() {
    echo "$timestamp"
    exit 0
}

die() {
    echo "$basename:" "$@" >&2
    exit 1
}

# Command line analysis
alias=
set_vars=
describe=
check=
for arg in "$@"; do
    case $arg in
	-v|--version) do_version ;;
	-t|--timestamp) do_timestamp ;;
	-s|--set-vars) set_vars=1 ;;
	-h|--help) do_usage;;
	-*) echo "$basename: unrecognized command-line argument: $arg (try -h)" >&2; exit 1;;
	*) alias=$arg
    esac
done
if test -z "$alias"; then do_usage; fi

# Expand one-word aliases to some arbitrary
# pre-defined configurations
case $alias in
    seqc)  alias=seqc-host-host-seqc ;;
    ptl)   alias=ptl-host-host-ptl ;;
    utc0)  alias=utc0-mtalpha-sim ;;
    ppp)   echo "$basename: warning: alias $alias is obsolete, use 'mtalpha' instead" >&2;
           alias=ppp-mtalpha-sim ;;
    ppp2)  echo "$basename: warning: alias $alias is obsolete, use 'mtalpha' instead" >&2;
           alias=ppp2-mtalpha-sim ;;
    ptlx)  alias=ptlx-x-x ;;
    utcx)  alias=utc-x-x ;;
    *-*)   ;; # more than one word: pass to next stage
    mt*)   alias=ppp2-$alias-sim ;;
    *)     # remaining single-word aliases
	die "$alias: unknown alias" ;;
esac

# Expand two-word aliases according to inventory
case $alias in
    *-*-*)   ;; # more than two word: pass to next stage
    *)
	IFS='-' read dialect arch <<EOF
$alias
EOF
	case $alias in
	    utc0-*)
		alias=$alias-sim
		;;
	    ppp*-mt*)
		alias=$alias-sim
		;;
	    ptl-host)
		alias=$alias-host-ptl
		;;
	    seqc-host)
		alias=$alias-host-seqc
		;;
	    *)
		die "$alias: unknown alias" ;;
	esac
	;;
esac

# Other cases
case $alias in
    *-*-*)
     # 3 or more parts, use them
	IFS='-' read slc_dialect slc_arch slc_os <<EOF
$alias
EOF
	;;
    *)
     # Any other form, unrecognized for now
	die "$alias: unknown alias" ;;
esac

slc_tag=$slc_dialect-$slc_arch-$slc_os

if test "x$set_vars" = x; then
    echo $slc_tag
    exit 0
fi

archvar=$(tr a-z A-Z <<<"$slc_arch")
basearch=${slc_arch:2}
basearchvar=$(tr a-z A-Z <<<"$basearch")

# Language mode selection
slc_complang=unknown
case $slc_dialect in
    ptl*)     slc_complang=cpp;;
    seqc|ppp*) slc_complang=c;;
    utc*)     slc_complang=utc;;
    *) echo "unknown dialect: $slc_dialect" >&2;;
esac

# Transformation selection
slc_transbase=unknown
case $slc_dialect-$slc_arch in
    utc*|seqc*|ptl*) slc_transbase=$slc_dialect	;;
    ppp*-*)     slc_transbase=$slc_dialect$basearch ;;
    *) echo "unknown combination: $slc_dialect-$slc_arch" >&2;;
esac

save_IFS=$IFS
IFS=:
found=
for d in $slc_datadir; do
  if test -d "$d/t-$slc_transbase"; then
    found="$d/t-$slc_transbase"
    break
  fi
done
if test -z "$found"; then
   echo "$basename: warning: could not find t-$slc_transbase in $slc_datadir" >&2
else
    slc_trans=$found
    slc_tflags+=("-I$slc_trans")
    slc_pp_prefix=(-include "$slc_trans/include/sl_support.h")
fi

for m4_preinc in slc_m4sugar.m4 slc.m4; do
   found=
   for d in $slc_incdir; do
     if test -r "$d/$m4_preinc"; then
       found="$d/$m4_preinc"
       break
     fi
   done
   if test -z "$found"; then
      echo "$basename: warning: could not find $m4_preinc in $slc_incdir" >&2
   else
      slc_tflags+=("$found")
   fi
done
for d in $slc_incdir; do
  slc_tflags+=("-I$d")
  slc_ppflags+=("-I$d")
done
IFS=$save_IFS

slc_tflags+=("-DPYTHON=$python" "-DSPP_PY=$spp_helper")

# Compiler selection
case $slc_dialect-$slc_arch in
    utc-x) slc_compiler=($CC_HOST -E) ;;
    *-x) slc_compiler=("$scu_helper" compile) ;;
    *-host)
	case $slc_complang in
	    cpp) slc_compiler=($CXX_HOST) ;;
	    c)   slc_compiler=($CC_HOST -std=gnu99) ;;
	    utc) echo "$basename: warning: no compiler for $dialect-$arch" >&2 ;;
	esac
	slc_filter1=(cp)
	slc_filter2=(cp)
	;;
    ppp*-*)
        archcomp=$(eval "echo \${CC_$basearchvar:-\"\$scu_helper\"} -std=gnu99")
	slc_compiler=("$python" "$spp_helper" "$slc_transbase" compile $slc_arch $archcomp)
	slc_filter1=("$python" "$spp_helper" "$slc_transbase" filter)
	slc_filter2=("$python" "$spp_helper" "$slc_transbase" filter2)
	;;
    *-*)
	case $slc_complang in
	    cpp) slc_compiler=($(eval "echo \${CXX_$basearchvar:-$scu_helper}")) ;;
	    c)   slc_compiler=($(eval "echo \${CC_$basearchvar:-$scu_helper} -std=gnu99")) ;;
	    utc) slc_compiler=($(eval "echo \${UTCC_$archvar:-$scu_helper} -std=utc")) ;;
	esac
	slc_filter1=(cp)
	slc_filter2=("$python" "$spp_helper" "$slc_transbase" filter2)
	;;

esac

# Compiler flags selection; default to optimize
case $slc_dialect in
    ppp)
	slc_cflags+=(-O2) ;;
    ppp2)
	slc_cflags+=(-O2 -DMT_FORCE_TEMP_FOR_SHARED_WRITE=1) ;;
    utc0)
	slc_cflags+=(-O1) ;;
    *) ;;
esac

# Assembler and linker selection
case $slc_complang-$slc_arch in
    *-x)      slc_aslink=("$scu_helper" assemble/link);;
    cpp-host) slc_aslink=(${CXX_HOST:-g++}) ;;
    *-host)   slc_aslink=(${CC_HOST:-gcc}) ;;
    cpp-*)    slc_aslink=($(eval "echo \${CXX_$archvar:-\"\$scu_helper\"}")) ;;
    *-*)      slc_aslink=($(eval "echo \${CC_$archvar:-\"\$scu_helper\"}")) ;;
esac

# Ar and ranlib selection
case $slc_arch in
    host)
              slc_ar=($AR_HOST)
              slc_ranlib=($RANLIB_HOST)
	      ;;
    mtalpha)
              slc_ar=($AR_MTALPHA)
              slc_ranlib=($RANLIB_MTALPHA)
	      ;;
    mtsparc)
              slc_ar=($AR_MTSPARC)
              slc_ranlib=($RANLIB_MTSPARC)
	      ;;
    *)
              slc_ar=("$scu_helper" archive)
              slc_ranlib=("$scu_helper" ranlib)
	      ;;
esac

# Extra defines
case $slc_arch in
    mtalpha)
        slc_cflags+=(-mcpu=ev6 -mfix -mcix -mmax -mbwx -fno-math-errno -fno-trapping-math)
        ;;
    *)
	;;
esac
slc_ppflags+=(-DUSE_C_DIVIDE)

# Extra flag selection
case $slc_arch-$slc_os in
    mt*-sim)
        slc_ppflags+=(-D__mt_freestanding__ -D__WORDSIZE=64)
        # slc_cflags="$slc_cflags -D__mt_freestanding__ -D__WORDSIZE=64"
        # slc_cflags="$slc_cflags -nostdinc"
	slc_ldflags+=(-Wl,-Ttext -Wl,0x1000000 -nostdlib)
	if test -n "$slc_debug_flags"; then
	    echo "$basename: warning: flags unsupported by $slc_arch-$slc_os: $slc_debug_flags" >&2
	fi
	slc_debug_flags=()
	;;
    *)
	slc_debug_flags=(${slc_debug_flags:+$slc_debug_flags})
	;;
esac

# OS selection
case $slc_os in
    x) ;;
    *)
        save_IFS=$IFS
        IFS=:
        for d in $slc_datadir; do
            slc_ppflags+=("-I$d/$slc_arch-$slc_os/include")
            # slc_cflags="$slc_cflags -I$d/$slc_arch-$slc_os/include"
        done
	if test "$slc_use_slrt" != "no"; then
            found=
            for d in $slc_libdir; do
  		osdir=$d/$slc_arch-$slc_os
		if test -r "$osdir/slrt.o"; then
		    found=$osdir/slrt.o
		    break
		fi
            done
	    if test -z "$found"; then
		echo "$basename: warning: slrt.o not found for $slc_arch-$slc_os in $slc_libdir" >&2
            else
		slc_ldflags+=("$found")
	    fi
        fi

	for d in $slc_libdir; do
	    slc_ldflags+=("-L$d/$slc_arch-$slc_os")
        done
	if test "$slc_use_libsl" != "no"; then
            slc_ldflags+=("-lsl")
	fi
	slc_ldflags+=("-lslc")

        IFS=$save_IFS
	;;
esac

# Program entry selection
case $slc_os in
    host-ptl)
	slc_ldflags+=(-lpthread)
	;;
    *)  ;;
esac

set | grep '^slc_'




