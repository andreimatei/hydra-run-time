#! @BASH@
# $Id$
#
copyright="Copyright (C) 2009 the CSA group - Universiteit van Amsterdam."
# All rights reserved.

set -e
python=${PYTHON:-@python@}
slc_helper=${SLC:-@slc_helper@}
sag_helper=${SAG:-@sag_helper@}
slc_libdir=${SLC_LIBDIR:-@slc_libdir@}
slc_datadir=${SLC_DATADIR:-@slc_datadir@}

timestamp=$(echo '$Date$'|cut -d' ' -f2)
version=1

do_usage() {
  cat <<EOF
SL Runner.

The \`slr' utility provides a single interface to run a SVP program
compiled with \`slc'. \`slr' analyses the executable file to determine
how to run the program, and invokes the simulator if needed.

Usage: $0 [OPTION] PROGRAM [ARGS]...

Options:
  -r runner      use the specified runner (use when autodetect fails)
  -x             show configuration string embedded in program (if any)
  -Ws,arg        pass "arg" as extra command-line parameter to the simulator,
                 when the simulator is used.
  -h, --help     print this help, then exit
  -v, --version  print version number, then exit

Examples:

  # show runner string stored in \`a.out':

  slr -x a.out 

  # run fibo.x, possibly using the MT simulator:

  slr fibo.x 

Report bugs and patches to the CSA group.
EOF
  exit 0
}

do_version() {
  rev='$Rev$'
  rev=$(echo "$rev"|cut -d' ' -f2)
  cat <<EOF
slr $version.$rev

$copyright
All rights reserved. There is NO warranty; not even for
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Written by Raphael 'kena' Poss.
EOF
  exit 0
}

die() {
  printf '%s: %s\n' "$0" "$2" >&2
  exit $1
}

# Command line analysis
prev_arg=
show_embedded=
vars=
program=
SIMARGS=${SIMARGS:-}
for arg in "$@"; do
  # if the previous option needs an argument, assign it
  if test -n "$prev_arg"; then
     eval "$prev_arg=\$arg"
     prev_arg=
     shift
     continue
  fi
  case $arg in
      -r)	prev_arg=runner; shift;;
      -x)	show_embedded=1; shift;;
      -v|--version)	do_version;;
      -h|--help)	do_usage;;
      -Ws*)   lowarg=$(echo "$arg"|cut -d',' -f2-|tr ',' ' ')
	  SIMARGS="$SIMARGS $lowarg"
	  shift;;
      --)  break;;
      -*)  die 1 "unrecognized command-line argument: $arg (try -h)";;
      *=*) vars="$vars $arg";;
      *)   if test -z "$program"; then program=$arg
           else die 1 "unrecognized command-line argument: $arg (try -h)"
	   fi ;;
  esac
done


# does the program exist?
if ! test -f "$program"; then
  die 127 "no such file or directory: $program"
fi

# is it executable?
if ! test -x "$program"; then
  die 126 "permission denied: $program"
fi

if test -n "$show_embedded" -o -z "$runner"; then
  tag=$(strings "$program"|grep '^slr_runner:.*:'|tail -n1|cut -d: -f2)
  if test "x$tag" = "x"; then
    if test -n "$show_embedded"; then
       echo "(none found)"
       exit 0    
    fi
  else
    if test -n "$show_embedded"; then
       echo "$tag"
       exit 0    
    fi
  fi
fi

datatag=$(strings "$program"|grep '^slr_datatag:.*:'|tail -n1|cut -d: -f2)
if test "x$datatag" = "x"; then
    die 1 "can't determine cce tag to recompile"
fi


if test -z "$runner"; then
  # Not specified, use tag if found
  if test -n "$tag"; then
     runner=$tag
  else
     die 1 "can't determine runner (try -r)"
  fi
fi

# check it
runner_script=
saveIFS=$IFS
IFS=:
for l in $slc_libdir; do
  if test -r "$l/r-$runner/run.sh"; then
     runner_script=$l/r-$runner/run.sh
     break
  fi
done
if test -z "$runner_script"; then
    die 1 "$runner: cannot find runner script"
fi
IFS=$saveIFS

cleanfiles=
docleanup() {
    for f in $cleanfiles; do
	if test -z "$KEEP"; then
	    rm -rf "$f" >/dev/null 2>&1
	else
	    echo "$0: $f: left over temporary" >&2
	fi
    done
}

trapcleanup() {
    local sig
    sig=$1
    docleanup
    trap - INT PIPE TERM QUIT ALRM
    kill -$sig $$
}
errcleanup() {
    docleanup
    trap - ERR
    exit 1
}

trap 'trapcleanup INT' INT
trap 'trapcleanup PIPE' PIPE
trap 'trapcleanup TERM' TERM
trap 'trapcleanup QUIT' QUIT
trap 'trapcleanup ALRM' ALRM
trap 'errcleanup' ERR

# build temporary directory
baseout=$(basename "$program")
tmpdir=$(mktemp -d -t "$baseout".XXXXXXXX)
cleanfiles=$tmpdir

# check program parameters
strings "$program" | (grep '^slr_arg:'||true) >"$tmpdir"/args.spec
if test -s "$tmpdir"/args.spec; then
    $python "$sag_helper" $vars <"$tmpdir"/args.spec >"$tmpdir"/data.c

    found=
    saveIFS=$IFS
    IFS=:
    for d in $slc_datadir; do
	if test -r "$d/arggen.sl"; then
	    found=$d/arggen.sl
	    break
	fi
    done
    IFS=$saveIFS
    if test -z "$found"; then
	die 1 "arggen.sl not found in $slc_datadir"
    fi
    mkdir "$tmpdir"/slc-rec
    TMPDIR="$tmpdir"/slc-rec @BASH@ "$slc_helper" -b "$datatag" -o "$tmpdir"/gen.x -I"$tmpdir" "$found"
    mkdir "$tmpdir"/slr-rec
    TMPDIR="$tmpdir"/slr-rec @BASH@ "$0" "$tmpdir"/gen.x >"$tmpdir"/data 2>/dev/null
else
    touch "$tmpdir"/data
fi

#set +e
export SIMARGS
@BASH@ "$runner_script" "$program" "$tmpdir"/data 
#set -e
docleanup
trap - ERR
#trap - ERR INT PIPE TERM QUIT ALRM
#if test $x -gt 128; then
#    kill -$(expr $x - 128) $$
#fi
#exit $x

