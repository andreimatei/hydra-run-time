#! /usr/bin/env python
# sag: this file is part of the slc project.
#
# Copyright (C) 2009 Universiteit van Amsterdam.
# All rights reserved.
import sys
import subprocess

def die(msg):
    print >>sys.stderr, msg
    sys.exit(1)

def genasm(out, data):
    #print >>out, "\t.globl __slr_data_start\n\t.globl __slr_data_end\n\t.align 4\n__slr_data_start:"
    print >>out, "struct __slr_data_t {"
    #for d in data:
        #print >>out, "\t.int __slr_input_%s-__slr_data_start" % d['label']
    print >>out, "  struct meta_%d_t { ptrdiff_t offset; size_t nitems; } meta[%d];" % (len(data), len(data))
    for d in data:
        print >>out, "  %s data_%s[%d];" % (d['type'], d['label'], d['len'])
    print >>out, "} __slr_data = {\n  { /* meta */"
    for d in data:
        print >>out, "    { (char*)(void*)&__slr_data.data_%s - (char*)(void*)&__slr_data," % d['label'],
        print >>out, "%d }," % d['len']
    print >>out, "  },"
    for d in data:
        print >>out, "  { /* %s */ " % d['label']
        for i in d['items']:
            print >>out, "\t%s," % i
        print >>out, "  },"
    #for d in data:
    #    print >>out, "\t.align 4"
    #    print >>out, "__slr_input_%s:" % d['label']
    #    print >>out, "\t.int %s" % d['len']
    #    for i in d['items']:
    #        print >>out, "\t.%s %s" % (d['type'], i)
    #print >>out, "__slr_data_end:"
    print "};"

def proto(out, parm):
    if len(parm):
        print >>out, "Program variables:"
        for k, v in parm.items():
            print >>out, "\t%s (%s)\t%s" % (k, v['type'], v['desc'])
    else:
        print >>out, "This program has no input variables."

def usage(parm):
    print >>sys.stderr, "Usage: <program> [VAR=INIT]..."
    print >>sys.stderr 
    proto(sys.stderr, parm)
    print >>sys.stderr
    print >>sys.stderr, "Initializers:"
    print >>sys.stderr, "\t(comma-separated list)\tuse the specified data items."
    print >>sys.stderr, "\tfile:FILENAME\tload data items from FILENAME, one per line."
    print >>sys.stderr, "\traw:FILENAME\tload data items from FILENAME as raw bytes."
    print >>sys.stderr
    print >>sys.stderr, "Examples:"
    print >>sys.stderr, "\t<program> foo=42,69"
    print >>sys.stderr, "\t<program> foo=file:hello.txt"

if __name__ == "__main__":

    required = []
    parm = {}
    spec = {}
    for l in sys.stdin:
        _, label, type, desc = l.rstrip().split(':',3)
        if label in required:
            die("%s: already declared" % label)
        required.append(label)
        parm[label] = {'type':type,'desc':desc}

    for a in sys.argv[1:]:
            if a == "list":
                proto(sys.stdout,parm)
                sys.exit(0)
            if not '=' in a:
                usage(parm)
                sys.exit(1)
            label, init = a.split('=',1)
            if label not in required:
                die("%s: unrecognized variable" % label)
            if label in spec:
                die("%s: multiple definitions found" % label)
            spec[label] = init

    data = []
    for r in required:
        if r not in spec:
            print >>sys.stderr, "warning: %s not specified, assuming empty array" % r
            spec[r] = ""
        
        init = spec[r]
        type = parm[r]['type']
        if init.startswith('raw:'):
            fname = init.split(':',1)[1]
            s = file(fname).read()
            p = 0
            ls = len(s)
            bytes = []
            while p + 8 < ls:
                bytes.append(','.join(('0x%x' % ord(x) for x in s[p:p+16])))
                p += 8
            while p < ls:
                bytes.append('0x%x' % ord(s[p]))
                p += 1
            data.append({'label':r, 'type':type, 'len':ls, 'items':bytes})
        elif init.startswith('file:'):
            fname = init.split(':',1)[1]
            items = []
            for l in file(fname):
                items.append(l.strip())
            data.append({'label':r, 'type':type, 'len':len(items), 'items':items})
        else:
            if not init:
                values = []
            else:
                values = init.split(',')
            data.append({'label':r, 'type':type, 'len':len(values), 'items':values})
    genasm(sys.stdout, data)

