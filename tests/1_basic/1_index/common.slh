m4_include(svp/iomacros.slh)

m4_define(SAMPLES, 20)
int indices[SAMPLES];

sl_def(icount, int,
       sl_shparm(unsigned, count))
{
  sl_index(i);
  if (sl_getp(count) >= SAMPLES)
    sl_break(0);
  indices[sl_getp(count)] = (int) i;
  sl_setp(count, sl_getp(count) + 1);
}
sl_enddef

sl_def(iprint, int,
       sl_shparm(unsigned, count),
       sl_glparm(unsigned, refcount))
{
  sl_index(i);
  unsigned c = sl_getp(count);
  if (c >= sl_getp(refcount))
    sl_break(0);
  printf("thread #%u -> index %d\n", c, indices[c]);
  sl_setp(count, c + 1);
}
sl_enddef

sl_def(t_main, void)
{
  int r;
  puts(m4_quote("[test_index_params]\n"));
  sl_create(,, test_index_params,, int,
	    icount,
	    sl_sharg(unsigned, count, 0));
  sl_sync(r);
  if (r == SVP_EBROKEN) {
    puts("#threads = inf? (stopped at 20)\n");
    sl_seta(count, 20);
  }
  else
    printf("#threads = %d\n", sl_geta(count));

  sl_create(,, 0, SAMPLES,,, int,
	    iprint,
	    sl_sharg(unsigned, c, 0),
	    sl_glarg(unsigned, refc, sl_geta(count)));
  sl_sync();
}
sl_enddef
