2010-06-17  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Use exclusive creates in benchmarks.

	* benchmarks/lib/benchmark.c,
	* benchmarks/mandel/mandel.c: Do it.

2010-06-17  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `sep' demo.

	* demo/sep.c: Test more combinations of policies. Also test
	allocation of shared and exclusive places. Use exclusive creates
	for allocations/deallocations.

2010-06-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `tmalloc' demo.

	* demo/tmalloc.c: `mallinfo' -> `mstat' (more accurate).

2010-06-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor fixes to quiet compiler warnings.

	* programs/benchmarks/sha/sha1.c,
	* programs/benchmarks/sha/sha1_alt.c: Use the standard C `assert'.

2010-06-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	New `tmalloc' demo for memory allocation.

	* demo/tmalloc.c: New.
	* demo/Makefile.am: Update accordingly.

2010-06-13  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update check expectations.
	
	* benchmarks/sha/sha1_alt.c: Expect failure for naked mta targets.

2010-06-13  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Use standard C header names in programs.

	* benchmarks/blas/blasbench.h,
	* benchmarks/blas/templates/xasum.c,
	* benchmarks/blas/templates/xiamax.c,
	* benchmarks/blas/templates/xnrm2.c,
	* benchmarks/fft/fft-bench.c,
	* benchmarks/lib/benchmark.c,
	* benchmarks/livermore/kernel15.c,
	* benchmarks/livermore/kernel2.c,
	* benchmarks/livermore/kernel22.c,
	* benchmarks/mandel/mandel.c,
	* benchmarks/quicksort/am-quicksort-iterative.c,
	* benchmarks/quicksort/am-quicksort.c,
	* benchmarks/quicksort/sah-quicksort.c,
	* benchmarks/sha/sha1.c,
	* benchmarks/sha/sha1_alt.c,
	* demo/10threads.c,
	* demo/answer.c,
	* demo/bitblt.c,
	* demo/env.c,
	* demo/fibonacci.c,
	* demo/fibre.c,
	* demo/helloworld.c,
	* demo/keyblit.c,
	* demo/pi.c,
	* demo/sep.c,
	* benchmarks/livermore/ll-generate.py (gencode): Do it.

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update check expectations.

	* demo/sep.c: Remove expected failure (underlying bug was fixed).

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update check expectations.

	* benchmarks/sha/sha1.c: Expect failure for naked mta targets
	only.

	* benchmarks/sha/sha1_alt.c: Do not expect failure any more.

	* demo/sep.c: Expect failure for `mta_s' (temporary, likely due to
	underlying hardware bug).

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor cosmetic fixes.

	* benchmarks/lib/benchmark.h: Whitespace.
	* benchmarks/mandel/mandel.c: Anonymize argument in `proccall'.

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Code fixes in benchmarks.

	* benchmarks/fft/fft_extra.c (FFT_Reverse): avoid declaring `k'
	between `create' and `sync', this is now disallowed by the
	grammar.

	* benchmarks/livermore/kernel11.c: Fix syntax of initializer for
	argument `Xkml'.

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Downscale the default lookup table for the FFT benchmark.

	* benchmarks/fft/Makefile.am,
	* benchmarks/fft/fft-bench.c: Reduce support to M=8 instead of
	16. This is needed since compilation times with `spr' skyrocket on
	large code.

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update benchmarking framework to use the new target names.

	* build-aux/benchmarks.mk: Benchmark all `mta' targets.
	* benchmarks/lib/Makefile.am: Also build libraries for all the
	`mta' targets. Simplify directory names.

2010-05-31  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update programs to use the new framework.

	* benchmarks/lib/benchmark.h,
	* benchmarks/lib/benchmark.c: Update to use the new function
	pointer declaration syntax.

	* benchmarks/lib/benchmark.c,
	* benchmarks/mandel/mandel.c,
	* demo/sep.c: Ensure that `create'-to-pointer dereference the
	function pointer.

	* benchmarks/sha/sha1_alt.c: Include `delegate.h' to reach
	`PLACE_LOCAL'.

2010-04-29  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update copyright notice of files changed in 2010.

	* benchmarks/blas/blasbench.h,
	* benchmarks/fft/fft-bench.c,
	* benchmarks/lib/Makefile.am,
	* benchmarks/lib/benchmark.c,
	* benchmarks/livermore/kernel15.c,
	* benchmarks/livermore/kernel21.c,
	* benchmarks/livermore/kernel23.c,
	* benchmarks/livermore/kernel6.c,
	* benchmarks/livermore/kernel8.c,
	* benchmarks/livermore/kernel9.c,
	* benchmarks/mandel/Makefile.am,
	* benchmarks/mandel/mandel.c,
	* demo/10threads.c,
	* demo/Makefile.am,
	* demo/answer.c,
	* demo/bitblt.c,
	* demo/fibonacci.c,
	* demo/fibre.c,
	* demo/helloworld.c,
	* demo/keyblit.c,
	* demo/perf.c,
	* demo/pi.c,
	* demo/roman.c,
	* demo/sep.c: Add 2010 to copyright notice.

2010-04-26  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Increase use of `-b mtalpha'.

	* benchmarks/lib/Makefile.am: Use target alias `mtalpha' instead
	of `ppp-mtalpha' as this is now resolved properly.

2010-03-29  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `mandel' benchmark.

	* benchmarks/mandel/mandel_colors.c: Enable drawing during
	compute by default.

2010-02-27  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Separate `mandel' benchmark into drawing and non-drawing versions.
	
	* benchmarks/mandel/mandel.c: Conditionalize support for colors,
	disable by default.
	
	* benchmarks/mandel/mandel_colors.c: New. Enable colors.

	* benchmarks/mandel/Makefile.am: New target.

2010-02-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	More input for the `fibre' demo and new demo `pi'.

	* demo/pi.c,
	* demo/fibre.c.d4: New.
	* demo/Makefile.am: Update accordingly.

	* demo/fibre.c: Add `slt' run spec.

2010-02-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update to latest SL library changes.

	* benchmarks/blas/blasbench.h,
	* benchmarks/fft/fft-bench.c,
	* benchmarks/lib/benchmark.c,
	* benchmarks/livermore/kernel15.c,
	* benchmarks/livermore/kernel21.c,
	* benchmarks/livermore/kernel23.c,
	* benchmarks/livermore/kernel6.c,
	* benchmarks/livermore/kernel8.c,
	* benchmarks/livermore/ll-generate.py,
	* demo/10threads.c,
	* demo/Makefile.am,
	* demo/answer.c,
	* demo/bitblt.c,
	* demo/env.c,
	* demo/fibonacci.c,
	* demo/fibre.c,
	* demo/helloworld.c,
	* demo/keyblit.c,
	* demo/roman.c,
	* demo/sep.c: Change header names and use `assert' and `printf'
	properly.

2010-02-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend `fibre' demo to test Fibre syntax more.

	* demo/fibre.c.d3: Check handling of '][' in input.

2010-01-26  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.

	* demo/Makefile.am: Add missing `\'.

2010-01-25  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Reflect latest updates to SL standard library.

	* benchmarks/blas/blasbench.h,
	* benchmarks/fft/fft-bench.c,
	* benchmarks/lib/benchmark.c,
	* benchmarks/livermore/ll-generate.py,
	* benchmarks/mandel/mandel.c,
	* demo/env.c: Use new header names.

2010-01-25  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	New `env' demo for environment variables.

	* demo/env.c: New.

	* demo/Makefile.am: Update accordingly.

2010-01-20  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix bug in LKM9.

	* benchmarks/livermore/kernel9.c (innerk9): Fix array offset
	computation.

2010-01-12  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Improve the `perf' demo.

	* demo/perf.c: Also show the intervals API.

2010-01-11  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.
	
	* build-aux/benchmarks.mk (.c.tar): Avoid bundling files only
	useful for "make bench" to Unibench.

2009-12-27  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	* NEWS: Initialize for 2.2.x.

2009-12-27  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Release version 2.2
	
	* configure.ac,
	* Makefile.am: Use the new automated version numbering from the SL
	toolchain.

	* build-aux/package-version: Initialize to 2.2.

	* NEWS,
	* README: New.

2009-12-27  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Cleanup source tree.
	
	* benchmarks/livermore/k1.c,
	* benchmarks/livermore/k2.c,
	* benchmarks/livermore/k2-alt.c,
	* benchmarks/livermore/k3.c,
	* benchmarks/livermore/k4.c,
	* benchmarks/livermore/k4-alt.c,
	* benchmarks/livermore/k5.c,
	* benchmarks/livermore/k6.c,
	* benchmarks/livermore/k7.c,
	* benchmarks/livermore/k8.c,
	* benchmarks/livermore/k9.c,
	* benchmarks/livermore/k10.c,
	* benchmarks/livermore/k11.c,
	* benchmarks/livermore/k12.c,
	* benchmarks/livermore/k13.c,
	* benchmarks/livermore/k14.c: Remove, as this has been superseded
	by new implementations.

	* benchmarks/blas/bench-dasum.c, benchmarks/blas/bench-daxpy.c,
	benchmarks/blas/bench-dcopy.c, benchmarks/blas/bench-ddot.c,
	benchmarks/blas/bench-dnrm2.c, benchmarks/blas/bench-drot.c,
	benchmarks/blas/bench-dscal.c, benchmarks/blas/bench-dswap.c,
	benchmarks/blas/bench-idamax.c, benchmarks/blas/bench-isamax.c,
	benchmarks/blas/bench-sasum.c, benchmarks/blas/bench-saxpy.c,
	benchmarks/blas/bench-scopy.c, benchmarks/blas/bench-sdot.c,
	benchmarks/blas/bench-snrm2.c, benchmarks/blas/bench-srot.c,
	benchmarks/blas/bench-sscal.c, benchmarks/blas/bench-sswap.c,
	benchmarks/blas/blas_complex.h, benchmarks/blas/blasbench.h,
	benchmarks/blas/caxpy.c, benchmarks/blas/cdotc.c,
	benchmarks/blas/cdotu.c, benchmarks/blas/dasum.c,
	benchmarks/blas/daxpy.c, benchmarks/blas/dcopy.c,
	benchmarks/blas/ddot.c, benchmarks/blas/dnrm2.c,
	benchmarks/blas/drot.c, benchmarks/blas/dscal.c,
	benchmarks/blas/dswap.c, benchmarks/blas/idamax.c,
	benchmarks/blas/isamax.c, benchmarks/blas/sasum.c,
	benchmarks/blas/saxpy.c, benchmarks/blas/scopy.c,
	benchmarks/blas/sdot.c, benchmarks/blas/snrm2.c,
	benchmarks/blas/srot.c, benchmarks/blas/sscal.c,
	benchmarks/blas/sswap.c, benchmarks/blas/templates/bench-xasum.c,
	benchmarks/blas/templates/bench-xaxpy.c,
	benchmarks/blas/templates/bench-xcopy.c,
	benchmarks/blas/templates/bench-xdot.c,
	benchmarks/blas/templates/bench-xiamax.c,
	benchmarks/blas/templates/bench-xnrm2.c,
	benchmarks/blas/templates/bench-xrot.c,
	benchmarks/blas/templates/bench-xscal.c,
	benchmarks/blas/templates/bench-xswap.c,
	benchmarks/blas/templates/xasum.c,
	benchmarks/blas/templates/xaxpy.c,
	benchmarks/blas/templates/xaxpyc.c,
	benchmarks/blas/templates/xcopy.c,
	benchmarks/blas/templates/xdot.c,
	benchmarks/blas/templates/xdotc.c,
	benchmarks/blas/templates/xiamax.c,
	benchmarks/blas/templates/xnrm2.c,
	benchmarks/blas/templates/xrot.c,
	benchmarks/blas/templates/xscal.c,
	benchmarks/blas/templates/xswap.c, benchmarks/blas/zaxpy.c,
	benchmarks/blas/zdotc.c, benchmarks/blas/zdotu.c,
	benchmarks/fft/fft-bench.c, benchmarks/fft/fft-bench1-small.c,
	benchmarks/fft/fft-bench1.c, benchmarks/fft/fft-bench2-small.c,
	benchmarks/fft/fft-bench2.c, benchmarks/fft/fft.h,
	benchmarks/fft/fft_extra.c, benchmarks/fft/fft_impl1.c,
	benchmarks/fft/fft_impl2.c, benchmarks/fft/gen_table_1.c,
	benchmarks/lib/benchmark.c, benchmarks/lib/benchmark.h,
	benchmarks/livermore/kernel1.c, benchmarks/livermore/kernel10.c,
	benchmarks/livermore/kernel11.c, benchmarks/livermore/kernel12.c,
	benchmarks/livermore/kernel15.c, benchmarks/livermore/kernel18.c,
	benchmarks/livermore/kernel19.c, benchmarks/livermore/kernel2.c,
	benchmarks/livermore/kernel21.c, benchmarks/livermore/kernel22.c,
	benchmarks/livermore/kernel23.c, benchmarks/livermore/kernel3.c,
	benchmarks/livermore/kernel4.c, benchmarks/livermore/kernel5.c,
	benchmarks/livermore/kernel6.c, benchmarks/livermore/kernel7.c,
	benchmarks/livermore/kernel8.c, benchmarks/livermore/kernel9.c,
	benchmarks/mandel/mandel.c, benchmarks/nas/is/IS.c,
	benchmarks/nas/is/random.c,
	benchmarks/quicksort/am-quicksort-iterative.c,
	benchmarks/quicksort/am-quicksort.c,
	benchmarks/quicksort/sah-quicksort.c, benchmarks/sha/sha1.c,
	benchmarks/sha/sha1_alt.c, demo/10threads.c, demo/answer.c,
	demo/bitblt.c, demo/checkers.c, demo/fibonacci.c, demo/fibre.c,
	demo/helloworld.c, demo/keyblit.c, demo/perf.c, demo/roman.c,
	demo/sep.c: Update copyright notice and remove extraneous
	whitespace.

2009-12-27  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.
	
	* bootstrap: Ensure that the `data' subdirectory exists in
	`benchmarks/livermore' before generating the data files.

2009-12-21  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Packaging fixes (`make distcheck' succeeds).

	* benchmarks/fft/Makefile.am: Distribute `.inputs' files. Also
	clean generated headers during `make distclean'.

	* benchmarks/livermore/Makefile.am: Also distribute the kernel
	source files.

	* build-aux/benchmarks.mk: Set `check_DATA' to build the program
	executables and required .fdata files early during `make check',
	to avoid race conditions with parallel builds. Fix the `.check'
	rules.

2009-12-21  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Facilitate debugging.
	
	* benchmarks/lib/Makefile.am,
	* build-aux/benchmarks.mk: Compile host binaries with `-g' to ease
	debugging on failed `make check'.

2009-12-20  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix bugs in LL benchmark suite.
	
	* benchmarks/livermore/ll-generate.py: Pass ncores=1 when no SEP
	is available. This quiets LMK3. Also optimize slightly by using
	the `fast_' version of the memory functions. Ensure that array
	sizes in generated input files are integers.

	* benchmarks/livermore/ll-bounds.ods,
	* benchmarks/livermore/ll-bounds.csv: Enlarge bounds of array `XZ'
	for LMK4.

	* benchmarks/livermore/kernel4.c: Revert to non-parallel
	implementation to avoid invalid index uses.

2009-12-20  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Packaging fixes (allow `make distcheck').

	* benchmarks/lib/Makefile.am (CLEANFILES): Clean
	`mtalpha-sim/libbench.a' too.
	
	* benchmarks/livermore/ll-generate.py,
	* benchmarks/blas/gendata.sh: Also generate list of input files in
	`extradist.mk'.

	* benchmarks/livermore/Makefile.am,
	* benchmarks/blas/Makefile.am: Use the generated `extradist.mk'.

	* bootstrap: Invoke `benchmarks/blas/gendata.sh' and
	`benchmarks/livermore/ll-generate.py'.

	* benchmarks/fft/testfft.sh: Remove, because superseded by `make
	bench'.

	* benchmarks/fft/Makefile.am: Update accordingly. Express
	dependencies for `fft-bench1-small' and `fft-bench2-small' too. Do
	not use `BUILT_SOURCES' any more since the dependencies are
	sufficient to ensure the correct build order.

	* build-aux/benchmarks.mk: Clean benchmark executables even when
	`ENABLE_DEMOS' is not set, as they are built for checking
	too. Simplify clean rules with glob patterns to avoid "argument
	list too long" errors.

	* Makefile.am (EXTRA_DIST): Do not distribute `genbench.sh' as
	this does not exist any more.

2009-12-20  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Avoid false positive during `make check'.
	
	* demo/perf.c: Do not compare output between `slt' checks since
	performance metrics differ between each run.

2009-12-20  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance benchmarking framework.
	
	* build-aux/benchmarks.mk: Use the `timeout' script where
	appropriate to force eventual termination of all runs. Copy logs
	and execution packages of failures not resulting from interrupted
	builds to a global `failures' directory at the top level build
	directory.

2009-12-17  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance benchmarking framework.
	
	* build-aux/genbench.sh: Remove. Functionality moved to...
	* build-aux/benchmarks.mk: ... here. Enhance to support Automake's
	test engine in `make check'. Also keep as much rules as possible
	within one level of `make'.

	* benchmarks/fft/Makefile.am: Append to `DISTCLEANFILES' as it is
	now defined in `benchmarks.mk'.

2009-12-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Provide a faster FFT benchmark.

	* benchmarks/fft/fft-bench.c: When `FFT_SMALL_BENCH' is defined,
	only perform the forward FFT with no bit reversal.

	* benchmarks/fft/fft-bench1-small.c,
	* benchmarks/fft/fft-bench2-small.c,
	* benchmarks/fft/fft-bench1-small.inputs,
	* benchmarks/fft/fft-bench2-small.inputs: New. Use the new "small"
	mode of `fft-bench.c'.

	* benchmarks/fft/Makefile.am: Update accordingly.

2009-12-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Simplify the LMK3 benchmark.

	* benchmarks/livermore/kernel3.c: Use a simple N/P reduction.

2009-12-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	New `perf' demo for performance metrics.

	* demo/perf.c: New.

	* demo/Makefile.am: Update accordingly.

2009-12-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enable reduction code in LL suite.

	* benchmarks/livermore/kernel3.c,
	* benchmarks/livermore/kernel4.c: Enable REDUCTIONS code.

2009-12-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Embed more information in benchmark results.
	
	* build-aux/genbench.sh: Use `-t' with `slr' when running
	benchmarks.

2009-12-08  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor fixes to LL suite.
	
	* build-aux/genbench.sh: Fix typo. 

	* benchmarks/livermore/ll-bounds.ods,
	* benchmarks/livermore/ll-bounds.csv: Fix bounds for LK6.
	
	* benchmarks/livermore/kernel6.c, 
	* benchmarks/livermore/kernel21.c: Simplify array declarations.

2009-12-08  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Various fixes to the LL suite.
	
	* benchmarks/livermore/kernel2.c: Use alternate implementation.	

	* benchmarks/livermore/kernel8.c: Fix array offseting. Use fixed
	array bounds. Check array dimensions on entry.
	
	* benchmarks/livermore/kernel15.c: Use fixed array bounds.  Check
	array dimensions on entry.
	
	* benchmarks/livermore/kernel23.c: Fix off-by-one on array
	bounds. Check array dimensions on entry.

	* benchmarks/livermore/ll-bounds.ods,
	* benchmarks/livermore/ll-bounds.csv: Fix array bounds.

	* benchmarks/livermore/ll-generate.py: Populate "description" and
	"author" fields in the right order.
	
2009-12-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor fix in benchmarking output.

	* benchmarks/lib/benchmark.c: Insert line break before SEP dump.

2009-12-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Convert more benchmark input for use with `make check'.

	* benchmarks/fft/fft.d8,
	* benchmarks/mandel/mandel.d1,
	* benchmarks/livermore/ll-generate.py: Annotate some inputs for
	`make check'.

2009-12-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Generate BLAS data automatically.

	* benchmarks/blas/gendata.sh: New.
	
	* benchmarks/blas/data/cvv.d1, benchmarks/blas/data/cvv.d10,
	benchmarks/blas/data/cvv.d100, benchmarks/blas/data/cvv.d1000,
	benchmarks/blas/data/cvv.d10000, benchmarks/blas/data/cvv.d100000,
	benchmarks/blas/data/cvv.d2, benchmarks/blas/data/cvv.d20,
	benchmarks/blas/data/cvv.d200, benchmarks/blas/data/cvv.d2000,
	benchmarks/blas/data/cvv.d20000, benchmarks/blas/data/cvv.d5,
	benchmarks/blas/data/cvv.d50, benchmarks/blas/data/cvv.d500,
	benchmarks/blas/data/cvv.d5000, benchmarks/blas/data/cvv.d50000,
	benchmarks/blas/data/vvcc.d1, benchmarks/blas/data/vvcc.d10,
	benchmarks/blas/data/vvcc.d100, benchmarks/blas/data/vvcc.d1000,
	benchmarks/blas/data/vvcc.d10000,
	benchmarks/blas/data/vvcc.d100000, benchmarks/blas/data/vvcc.d2,
	benchmarks/blas/data/vvcc.d20, benchmarks/blas/data/vvcc.d200,
	benchmarks/blas/data/vvcc.d2000, benchmarks/blas/data/vvcc.d20000,
	benchmarks/blas/data/vvcc.d5, benchmarks/blas/data/vvcc.d50,
	benchmarks/blas/data/vvcc.d500, benchmarks/blas/data/vvcc.d5000,
	benchmarks/blas/data/vvcc.d50000: Remove, as it is now
	automatically generated.


2009-12-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Test benchmarks during `make check'.
	
	* build-aux/genbench.sh: Also generate targets suitable for `make
	check', based on input data files containing the text "USE IN MAKE
	CHECK". Capture all output to log file since the measurements are
	now extracted using delimiters.

	* build-aux/benchmarks.mk: Use them.

2009-12-06  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix LL benchmark code generation.

	* benchmarks/livermore/ll-generate.py: Do not generate Fibre read
	block for write-only kernel parameters. Also generate the
	`benchX.inputs' file.

2009-12-06  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor fixes in LL kernels.

	* benchmarks/livermore/kernel10.c,
	* benchmarks/livermore/kernel15.c,
	* benchmarks/livermore/kernel21.c,	
	* benchmarks/livermore/kernel23.c: Sanitize types in C99 VLA
	declarations to please C++ compiler.
	
	* benchmarks/livermore/kernel1.c,
	* benchmarks/livermore/kernel4.c,
	* benchmarks/livermore/kernel5.c,
	* benchmarks/livermore/kernel7.c,
	* benchmarks/livermore/kernel9.c,
	* benchmarks/livermore/kernel12.c: Fix typos.

2009-12-06  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Build and run LL suite using new framework.

	* benchmarks/livermore/Makefile.am: Use the new files.

	* benchmarks/livermore/ll.h,
	* benchmarks/livermore/arrays.h,
	* benchmarks/livermore/main_bench.c,
	* benchmarks/livermore/main_test.c,
	* benchmarks/livermore/main_simple.c,
	* benchmarks/livermore/bench1.bin.mtalpha.psize,
	* benchmarks/livermore/bench2.bin.mtalpha.psize,
	* benchmarks/livermore/bench3.bin.mtalpha.psize,
	* benchmarks/livermore/bench4.bin.mtalpha.psize,
	* benchmarks/livermore/bench5.bin.mtalpha.psize,
	* benchmarks/livermore/bench6.bin.mtalpha.psize,
	* benchmarks/livermore/bench7.bin.mtalpha.psize,
	* benchmarks/livermore/bench8.bin.mtalpha.psize,
	* benchmarks/livermore/bench9.bin.mtalpha.psize,
	* benchmarks/livermore/bench10.bin.mtalpha.psize,
	* benchmarks/livermore/bench11.bin.mtalpha.psize,
	* benchmarks/livermore/bench12.bin.mtalpha.psize,
	* benchmarks/livermore/bench13.bin.mtalpha.psize,
	* benchmarks/livermore/bench14.bin.mtalpha.psize: Remove (obsolete).

2009-12-06  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	More kernels in LL suite.
	
	* benchmarks/livermore/kernel21.c: 
	* benchmarks/livermore/kernel22.c: 
	* benchmarks/livermore/kernel23.c: New.

2009-12-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Improve LL benchmark suite, start merging changes from M. Hicks.

	* benchmarks/livermore/kernel1.c,
	* benchmarks/livermore/kernel2.c,
	* benchmarks/livermore/kernel3.c,
	* benchmarks/livermore/kernel4.c,
	* benchmarks/livermore/kernel5.c,
	* benchmarks/livermore/kernel6.c,
	* benchmarks/livermore/kernel7.c,
	* benchmarks/livermore/kernel8.c,
	* benchmarks/livermore/kernel9.c,
	* benchmarks/livermore/kernel10.c,
	* benchmarks/livermore/kernel11.c,
	* benchmarks/livermore/kernel12.c,
	* benchmarks/livermore/kernel15.c,
	* benchmarks/livermore/kernel18.c,
	* benchmarks/livermore/kernel19.c: New.

	* benchmarks/livermore/ll-bounds.ods,
	* benchmarks/livermore/ll-bounds.csv: Fix some interfaces.

	* benchmarks/livermore/ll-generate.py: Properly sort parameters
	for initialization. Generate a prototype for the `kernel'
	function. Pass number of cores if known from SEP.

2009-12-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Start automating the LL benchmark suite.
	
	* benchmarks/livermore/ll-bounds.ods,
	* benchmarks/livermore/ll-bounds.csv,
	* benchmarks/livermore/ll-generate.py: New.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor benchmarking fixes.

	* build-aux/benchmarks.mk: Also ship $(BUILT_SOURCES) with
	Unibench archives.

	* benchmarks/lib/benchmark.c: Change label for stub of SEP place
	allocation on targets which don't use SEP.
	
2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update FFT benchmark for use with Unibench.
	
	* benchmarks/fft/fft_bench.c,
	* benchmarks/fft/fft_bench1.c,
	* benchmarks/fft/fft_bench2.c,
	* benchmarks/fft/fft_test.c,
	* benchmarks/fft/fft_test1.c,
	* benchmarks/fft/fft_test2.c: Remove.

	* benchmarks/fft/fft-bench.c,
	* benchmarks/fft/fft-bench1.c,	
	* benchmarks/fft/fft-bench2.c: New. Use benchmarking framework.

	* benchmarks/fft/Makefile.am,
	* benchmarks/fft/fft.h,
	* benchmarks/fft/fft_extra.c: Update accordingly.
	
	* benchmarks/fft/fft-bench1.inputs,
	* benchmarks/fft/fft-bench2.inputs,
	* benchmarks/fft/fft.d1,
	* benchmarks/fft/fft.d8,
	* benchmarks/fft/fft.d256,
	* benchmarks/fft/fft.d1024,
	* benchmarks/fft/fft.d4096,
	* benchmarks/fft/fft.d16384,
	* benchmarks/fft/fft.d65536: New data inputs.
	
	* benchmarks/fft/README: Update documentation accordingly.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor benchmarking fix.
	
	* build-aux/genbench.sh: Reduce the number of data files (reuse
	wherever appropriate).

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix the `mandel' demo.
	
	* benchmarks/mandel/mandel.c: Read the bounding box coordinates in
	the correct order.
	
	* benchmarks/mandel/mandel.d1,
	* benchmarks/mandel/mandel.d2: Fix Fibre array bounds.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor benchmarking fix.

	* benchmarks/lib/benchmark.c: Also print headers when using
	CSV. Delimit benchmarking output with "### begin" and "### end"
	markers.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Generation source archives suitable for Unibench automatically.
	
	* build-aux/benchmarks.mk: Add new target `ub-archives'. This
	generates one tar file per benchmark set in `$(BENCHMARKS)'.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.

	* benchmarks/blas/Makefile.am: Also distribute the benchmarking
	templates and `blasbench.h'.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix bug in BLAS benchmarks.

	* benchmarks/blas/templates/bench-xrot.c: Properly read array
	`sx'.

2009-11-19  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor benchmarking fix.
	
	* benchmarks/lib/benchmark.c: Do not pad Fibre arrays in the
	output.

2009-11-18  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update the BLAS benchmarks to comply to Unibench specifications.
	
	* benchmarks/blas/blasbench.h,
	* benchmarks/blas/templates/bench-xasum.c,
	* benchmarks/blas/templates/bench-xaxpy.c,
	* benchmarks/blas/templates/bench-xcopy.c,
	* benchmarks/blas/templates/bench-xdot.c,
	* benchmarks/blas/templates/bench-xiamax.c,
	* benchmarks/blas/templates/bench-xnrm2.c,
	* benchmarks/blas/templates/bench-xrot.c,
	* benchmarks/blas/templates/bench-xscal.c,
	* benchmarks/blas/templates/bench-xswap.c: New.

	* benchmarks/blas/bench-dasum.c, benchmarks/blas/bench-daxpy.c,
	benchmarks/blas/bench-dcopy.c, benchmarks/blas/bench-ddot.c,
	benchmarks/blas/bench-dnrm2.c, benchmarks/blas/bench-drot.c,
	benchmarks/blas/bench-dscal.c, benchmarks/blas/bench-dswap.c,
	benchmarks/blas/bench-idamax.c, benchmarks/blas/bench-isamax.c,
	benchmarks/blas/bench-sasum.c, benchmarks/blas/bench-saxpy.c,
	benchmarks/blas/bench-scopy.c, benchmarks/blas/bench-sdot.c,
	benchmarks/blas/bench-snrm2.c, benchmarks/blas/bench-srot.c,
	benchmarks/blas/bench-sscal.c, benchmarks/blas/bench-sswap.c: Use
	the new templates.
	
	* programs/benchmarks/bench-dasum.inputs,
	* programs/benchmarks/bench-dcopy.inputs,
	* programs/benchmarks/bench-ddot.inputs,
	* programs/benchmarks/bench-dnrm2.inputs,
	* programs/benchmarks/bench-dswap.inputs,
	* programs/benchmarks/bench-idamax.inputs,
	* programs/benchmarks/bench-isamax.inputs,
	* programs/benchmarks/bench-sasum.inputs,
	* programs/benchmarks/bench-scopy.inputs,
	* programs/benchmarks/bench-sdot.inputs,
	* programs/benchmarks/bench-snrm2.inputs,	
	* programs/benchmarks/bench-sswap.inputs: Reuse `cvv' and `vvcc'
	where appropriate.
	
	* benchmarks/blas/data/cvv.d1, benchmarks/blas/data/cvv.d10,
	benchmarks/blas/data/cvv.d100, benchmarks/blas/data/cvv.d1000,
	benchmarks/blas/data/cvv.d10000, benchmarks/blas/data/cvv.d100000,
	benchmarks/blas/data/cvv.d2, benchmarks/blas/data/cvv.d20,
	benchmarks/blas/data/cvv.d200, benchmarks/blas/data/cvv.d2000,
	benchmarks/blas/data/cvv.d20000, benchmarks/blas/data/cvv.d5,
	benchmarks/blas/data/cvv.d50, benchmarks/blas/data/cvv.d500,
	benchmarks/blas/data/cvv.d5000, benchmarks/blas/data/cvv.d50000,
	benchmarks/blas/data/vvcc.d1, benchmarks/blas/data/vvcc.d10,
	benchmarks/blas/data/vvcc.d100, benchmarks/blas/data/vvcc.d1000,
	benchmarks/blas/data/vvcc.d10000,
	benchmarks/blas/data/vvcc.d100000, benchmarks/blas/data/vvcc.d2,
	benchmarks/blas/data/vvcc.d20, benchmarks/blas/data/vvcc.d200,
	benchmarks/blas/data/vvcc.d2000, benchmarks/blas/data/vvcc.d20000,
	benchmarks/blas/data/vvcc.d5, benchmarks/blas/data/vvcc.d50,
	benchmarks/blas/data/vvcc.d500, benchmarks/blas/data/vvcc.d5000,
	benchmarks/blas/data/vvcc.d50000: Add increments.

	* benchmarks/blas/data/v.d1, benchmarks/blas/data/v.d100,
	benchmarks/blas/data/v.d1000, benchmarks/blas/data/v.d10000,
	benchmarks/blas/data/v.d100000, benchmarks/blas/data/v.d200,
	benchmarks/blas/data/v.d2000, benchmarks/blas/data/v.d20000,
	benchmarks/blas/data/v.d500, benchmarks/blas/data/v.d5000,
	benchmarks/blas/data/v.d50000, benchmarks/blas/data/vv.d1,
	benchmarks/blas/data/vv.d10, benchmarks/blas/data/vv.d100,
	benchmarks/blas/data/vv.d1000, benchmarks/blas/data/vv.d10000,
	benchmarks/blas/data/vv.d100000, benchmarks/blas/data/vv.d2,
	benchmarks/blas/data/vv.d20, benchmarks/blas/data/vv.d200,
	benchmarks/blas/data/vv.d2000, benchmarks/blas/data/vv.d20000,
	benchmarks/blas/data/vv.d5, benchmarks/blas/data/vv.d50,
	benchmarks/blas/data/vv.d500, benchmarks/blas/data/vv.d5000,
	benchmarks/blas/data/vv.d50000: Remove (redundant).

	* benchmarks/blas/templates/xasum.c,
	* benchmarks/blas/templates/xaxpy.c,
	* benchmarks/blas/templates/xcopy.c,
	* benchmarks/blas/templates/xdot.c,
	* benchmarks/blas/templates/xiamax.c,	
	* benchmarks/blas/templates/xnrm2.c: Use `const' where
	appropriate.

	* benchmarks/blas/dasum.c, benchmarks/blas/dnrm2.c,
	benchmarks/blas/dscal.c, benchmarks/blas/idamax.c,
	benchmarks/blas/isamax.c, benchmarks/blas/sasum.c,
	benchmarks/blas/snrm2.c, benchmarks/blas/sscal.c: Cleanup
	whitespace.

2009-11-18  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor fix for benchmarking.
	
	* build-aux/genbench.sh: Split the `clean' rule to avoid "argument
	list too long".

2009-11-18  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Adapt the benchmarking framework to latest library updates.
	
	* benchmarks/lib/benchmark.h,	
	* benchmarks/lib/benchmark.c: Use the new API for intervals and
	reporting from `<svp/perf.h>'. Simplify. Add tags to
	`start_interval' and `finish_interval'.
	
	* benchmarks/mandel/mandel.c: Use the new interface for
	`start_interval()' and `finish_interval()'.

2009-11-05  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix bug in BLAS `isamax' and `idamax' benchmarks.

	* benchmarks/blas/templates/xiamax.c: Accept parameter through
	`sl_shparm', not `sl_shfparm'.

2009-11-04  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Small bug in benchmark list generation.
	
	* build-aux/genbench.sh: Fix typo and remove duplicates. 

2009-11-04  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix bug in BLAS `isamax' and `idamax' benchmarks.
	
	* benchmarks/blas/bench-isamax.c (work),	
	* benchmarks/blas/bench-idamax.c (work): Use `sl_sharg' instead of
	`sl_shfarg'.

2009-11-04  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	New inputs for BLAS benchmarks.

	* benchmarks/blas/asum.d1,
	* benchmarks/blas/asum.d2,
	* benchmarks/blas/asum.d3,
	* benchmarks/blas/axy.d1,
	* benchmarks/blas/axy.d2,
	* benchmarks/blas/axy.d3,
	* benchmarks/blas/dot.d1,
	* benchmarks/blas/dot.d2,
	* benchmarks/blas/dot.d3,
	* benchmarks/blas/rot.d1,
	* benchmarks/blas/rot.d2,
	* benchmarks/blas/rot.d3: Remove.

	* benchmarks/blas/data/cvv.d1,
	* benchmarks/blas/data/cvv.d10,
	* benchmarks/blas/data/cvv.d100,
	* benchmarks/blas/data/cvv.d1000,
	* benchmarks/blas/data/cvv.d10000,
	* benchmarks/blas/data/cvv.d100000,
	* benchmarks/blas/data/cvv.d2,
	* benchmarks/blas/data/cvv.d20,
	* benchmarks/blas/data/cvv.d200,
	* benchmarks/blas/data/cvv.d2000,
	* benchmarks/blas/data/cvv.d20000,
	* benchmarks/blas/data/cvv.d5,
	* benchmarks/blas/data/cvv.d50,
	* benchmarks/blas/data/cvv.d500,
	* benchmarks/blas/data/cvv.d5000,
	* benchmarks/blas/data/cvv.d50000,
	* benchmarks/blas/data/v.d1,
	* benchmarks/blas/data/v.d100,
	* benchmarks/blas/data/v.d1000,
	* benchmarks/blas/data/v.d10000,
	* benchmarks/blas/data/v.d100000,
	* benchmarks/blas/data/v.d200,
	* benchmarks/blas/data/v.d2000,
	* benchmarks/blas/data/v.d20000,
	* benchmarks/blas/data/v.d500,
	* benchmarks/blas/data/v.d5000,
	* benchmarks/blas/data/v.d50000,
	* benchmarks/blas/data/vv.d1,
	* benchmarks/blas/data/vv.d10,
	* benchmarks/blas/data/vv.d100,
	* benchmarks/blas/data/vv.d1000,
	* benchmarks/blas/data/vv.d10000,
	* benchmarks/blas/data/vv.d100000,
	* benchmarks/blas/data/vv.d2,
	* benchmarks/blas/data/vv.d20,
	* benchmarks/blas/data/vv.d200,
	* benchmarks/blas/data/vv.d2000,
	* benchmarks/blas/data/vv.d20000,
	* benchmarks/blas/data/vv.d5,
	* benchmarks/blas/data/vv.d50,
	* benchmarks/blas/data/vv.d500,
	* benchmarks/blas/data/vv.d5000,
	* benchmarks/blas/data/vv.d50000,
	* benchmarks/blas/data/vvcc.d1,
	* benchmarks/blas/data/vvcc.d10,
	* benchmarks/blas/data/vvcc.d100,
	* benchmarks/blas/data/vvcc.d1000,
	* benchmarks/blas/data/vvcc.d10000,
	* benchmarks/blas/data/vvcc.d100000,
	* benchmarks/blas/data/vvcc.d2,
	* benchmarks/blas/data/vvcc.d20,
	* benchmarks/blas/data/vvcc.d200,
	* benchmarks/blas/data/vvcc.d2000,
	* benchmarks/blas/data/vvcc.d20000,
	* benchmarks/blas/data/vvcc.d5,
	* benchmarks/blas/data/vvcc.d50,
	* benchmarks/blas/data/vvcc.d500,
	* benchmarks/blas/data/vvcc.d5000,
	* benchmarks/blas/data/vvcc.d50000: New.

	* benchmarks/blas/Makefile.am,
	* benchmarks/blas/bench-dasum.inputs,
	* benchmarks/blas/bench-daxpy.inputs,
	* benchmarks/blas/bench-dcopy.inputs,
	* benchmarks/blas/bench-ddot.inputs,
	* benchmarks/blas/bench-dnrm2.inputs,
	* benchmarks/blas/bench-drot.inputs,
	* benchmarks/blas/bench-dscal.inputs,
	* benchmarks/blas/bench-dswap.inputs,
	* benchmarks/blas/bench-idamax.inputs,
	* benchmarks/blas/bench-isamax.inputs,
	* benchmarks/blas/bench-sasum.inputs,
	* benchmarks/blas/bench-saxpy.inputs,
	* benchmarks/blas/bench-scopy.inputs,
	* benchmarks/blas/bench-sdot.inputs,
	* benchmarks/blas/bench-snrm2.inputs,
	* benchmarks/blas/bench-srot.inputs,
	* benchmarks/blas/bench-sscal.inputs,
	* benchmarks/blas/bench-sswap.inputs: Update accordingly.
	
	* benchmarks/blas/Makefile.am: Update accordingly.

2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xcopy.c,
	* benchmarks/blas/templates/xswap.c,
	* benchmarks/blas/sswap.c,
	* benchmarks/blas/scopy.c,
	* benchmarks/blas/dswap.c,
	* benchmarks/blas/dcopy.c,
	* benchmarks/blas/bench-sswap.c,
	* benchmarks/blas/bench-scopy.c,
	* benchmarks/blas/bench-dswap.c,
	* benchmarks/blas/bench-dcopy.c,
	* benchmarks/blas/bench-sswap.inputs,
	* benchmarks/blas/bench-scopy.inputs,
	* benchmarks/blas/bench-dswap.inputs,
	* benchmarks/blas/bench-dcopy.inputs: New.

	* benchmarks/blas/Makefile.am: Update accordingly.

2009-11-04  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor portability fix.

	* benchmarks/fft/fft_bench.c,
	* benchmarks/fft/fft_test.c,	
	* benchmarks/livermore/main_test.c: Use `clock()' instead of
	`get_cycles()' which is obsolete.

2009-11-04  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Optimize the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xasum.c,
	* benchmarks/blas/templates/xaxpy.c,
	* benchmarks/blas/templates/xaxpyc.c,
	* benchmarks/blas/templates/xrot.c,
	* benchmarks/blas/templates/xnrm2.c,
	* benchmarks/blas/templates/xscal.c,
	* benchmarks/blas/templates/xdot.c,	
	* benchmarks/blas/templates/xdotc.c: Optimize some. Use anonymous
	thread arguments where appropriate.

2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.
	
	* build-aux/benchmarks.mk: Make `bench.mk' dependent upon
	`Makefile.am' to catch file list updates.

2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xiamax.c,
	* benchmarks/blas/isamax.c,
	* benchmarks/blas/idamax.c,
	* benchmarks/blas/bench-isamax.c,
	* benchmarks/blas/bench-idamax.c,
	* benchmarks/blas/bench-isamax.inputs,
	* benchmarks/blas/bench-idamax.inputs: New.

	* benchmarks/blas/Makefile.am: Update accordingly.

2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xscal.c,
	* benchmarks/blas/sscal.c,
	* benchmarks/blas/dscal.c,
	* benchmarks/blas/bench-sscal.c,
	* benchmarks/blas/bench-dscal.c,
	* benchmarks/blas/bench-sscal.inputs,
	* benchmarks/blas/bench-dscal.inputs: New.

	* benchmarks/blas/Makefile.am: Update accordingly.
	
2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xnrm2.c,
	* benchmarks/blas/snrm2.c,
	* benchmarks/blas/dnrm2.c,
	* benchmarks/blas/bench-snrm2.c,
	* benchmarks/blas/bench-dnrm2.c,
	* benchmarks/blas/bench-snrm2.inputs,
	* benchmarks/blas/bench-dnrm2.inputs: New.

	* benchmarks/blas/Makefile.am: Update accordingly.

2009-11-03  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the BLAS benchmark suite.
	
	* benchmarks/blas/templates/xdot.c: Simplify.
	
	* benchmarks/blas/bench-daxpy.c: Check array size differently.

	* benchmarks/blas/templates/xasum.c,
	* benchmarks/blas/sasum.c,
	* benchmarks/blas/dasum.c,
	* benchmarks/blas/bench-sasum.c,
	* benchmarks/blas/bench-dasum.c,
	* benchmarks/blas/bench-sasum.inputs,
	* benchmarks/blas/bench-dasum.inputs,
	* benchmarks/blas/asum.d1,
	* benchmarks/blas/asum.d2,
	* benchmarks/blas/asum.d3,
	* benchmarks/blas/templates/xrot.c,
	* benchmarks/blas/srot.c,
	* benchmarks/blas/drot.c,
	* benchmarks/blas/bench-srot.c,
	* benchmarks/blas/bench-drot.c,
	* benchmarks/blas/bench-srot.inputs,
	* benchmarks/blas/bench-drot.inputs,
	* benchmarks/blas/rot.d1,
	* benchmarks/blas/rot.d2,
	* benchmarks/blas/rot.d3: New.

2009-10-21  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Fix algorithm bug in `checkers' demo.
	
	* demo/checkers.c: Change check for position. 

2009-10-14  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `mandel' demo.

	* benchmarks/mandel/mandel.c: Demonstrate measure intervals by
	defining two of them in the "work" part.

2009-10-13  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the benchmark framework.
	
	* benchmarks/lib/benchmark.h,	
	* benchmarks/lib/benchmark.c: Allow the `work' part of a benchmark
	to define sub-intervals for measurements.

2009-10-13  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the benchmark outer thread.
	
	* benchmarks/lib/benchmark.c: Enclose the measurements in a Fibre
	array when the Fibre format is specified.

2009-10-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fix.
	
	* build-aux/benchmarks.mk (clean-local-bench): Use `if' to avoid
	error when `bench.mk' doesn't exist.

2009-10-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Convert the `mandel' demo to the new benchmark framework.

	* demo/mandel.c: Rename to...	
	* benchmarks/mandel/mandel.c: ...here. Change to become a
	benchmark.

	* benchmarks/mandel/mandel.d1,
	* benchmarks/mandel/mandel.d2,
	* benchmarks/mandel/Makefile.am: New.

	* benchmarks/Makefile.am,
	* demo/Makefile.am,
	* configure.ac: Update accordingly.

2009-10-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `blas' benchmarks with the new build tools.

	* benchmarks/blas/bench-daxpy.inputs,
	* benchmarks/blas/bench-saxpy.inputs: New.
	
	* benchmarks/blas/Makefile.am: Update to use the new framework.

2009-10-09  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Implement some automation to run benchmarks.
	
	* build-aux/genbench.sh,
	* build-aux/benchmarks.mk: New.

	* Makefile.am: Update accordingly.
	* configure.ac: Require bash.

2009-10-08  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Convert `blas' benchmarks code to new framework.
	
	* benchmarks/blas/blas-test-saxpy.c: Delete.
	
	* benchmarks/blas/bench-saxpy.c,
	* benchmarks/blas/bench-daxpy.c: New.

	* benchmarks/blas/axy.d1,
	* benchmarks/blas/axy.d2,	
	* benchmarks/blas/axy.d3: Example data for both `saxpy' and
	`daxpy'.

	* benchmarks/blas/Makefile.am: Update accordingly.
	
2009-10-08  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Start to implement the top-level benchmark program.
	
	* benchmarks/lib/benchmark.c,
	* benchmarks/lib/benchmark.h: New.
	
	* benchmarks/lib/Makefile.am: Compile library for multiple
	targets.

	* configure.ac: Check for `ranlib' since it is required for making
	libraries.

2009-10-08  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Introduce `benchmark/lib' for benchmarking framework.
	
	* benchmarks/lib/Makefile.am: New.
	* benchmarks/Makefile.am: Recurse into `lib'.

	* configure.ac: Generate Makefile for `lib'.

2009-10-07  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Create new demo `sep' to show off SEP allocation.
	
	* demo/sep.c: New.
	* demo/Makefile.am: Update accordingly.

2009-10-01  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Reinstate numeric checking for the FFT code.
	
	* benchmarks/fft/fft_test1.c,	
	* benchmarks/fft/fft_test2.c: Do not ignore numeric output anymore
	since the diverging results on MT-Alpha were due to a simulation
	bug that is now fixed.
	
2009-09-30  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Avoid `-n' in test code.
	
	* demo/mandel.c,
	* benchmarks/fft/fft_test1.c,	
	* benchmarks/fft/fft_test2.c: Do not use `-n' in SLT_RUN any more.

2009-09-29  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `fft' benchmark program.
	
	* benchmarks/fft/fft_bench.c: Print cycle counts at each outer
	iteration.

2009-09-29  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `mandel' demo.
	
	* demo/mandel.c: Update to use the new API definition from
	note [sl7].

2009-09-28  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Update `checkers' demo.
	
	* demo/checkers.c: Demonstrate `gfx_fb_set' since `gfx_putpixel'
	is already demoed in the `mandel' demo

2009-09-28  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Enhance the `mandel' demo.
	
	* demo/mandel.c: Refactor code to clarify steps. Change the color
	scheme to make the output more printer-friendly.

2009-09-25  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the `mandel' demo with use of the SEP protocol.
	
	* demo/mandel.c: Update to use place management.

2009-09-21  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Add some demos with graphics.

	`checkers' - create a 8x8 checker board.	
	`mandel' - approximate the Mandelbrot set.

	* demo/checkers.c,
	* demo/mandel.c: New.

	* demo/Makefile.am: Update accordingly.

2009-08-28  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Extend the SHA benchmark code.
	
	* benchmarks/sha/sha1.c: Remove block size in call to
	`sha_main_outer'.
	
	* benchmarks/sha/sha1_alt.c: New optimized version, thanks to
	Mike Lankamp.

	* benchmarks/sha/testsha.sh: New.
	
	* benchmarks/sha/Makefile.am: Update accordingly.
	
2009-08-26  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Minor packaging fixes.

	* benchmarks/livermore/genmk.sh: Be more verbose.

2009-08-26  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	Make package less dependent on the base tree.
	
	* bootstrap: Make less verbose. Use the new `sl-init-autoconf'.

2009-08-25  Raphael 'kena' Poss  <r.c.poss@uva.nl>

	* ChangeLog: initialize.

See `slc/ChangeLog.1' for earlier changes.
